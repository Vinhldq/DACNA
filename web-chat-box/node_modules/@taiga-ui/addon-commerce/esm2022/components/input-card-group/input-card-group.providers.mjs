import { inject } from '@angular/core';
import { WA_WINDOW } from '@ng-web-apis/common';
import { TUI_CARD_CVC_TEXTS, TUI_CARD_EXPIRY_TEXTS, TUI_CARD_NUMBER_TEXTS, } from '@taiga-ui/addon-commerce/tokens';
import { tuiTypedFromEvent } from '@taiga-ui/cdk/observables';
import { tuiCreateTokenFromFactory } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_MEDIA } from '@taiga-ui/core/tokens';
import { combineLatest, map, of, startWith, switchMap } from 'rxjs';
/**
 * InputCardGroup texts
 */
export const TUI_INPUT_CARD_GROUP_TEXTS = tuiCreateTokenFromFactory(() => {
    const win = inject(WA_WINDOW);
    const cardNumberTexts = inject(TUI_CARD_NUMBER_TEXTS);
    const expiryTexts = inject(TUI_CARD_EXPIRY_TEXTS);
    const cvcTexts = inject(TUI_CARD_CVC_TEXTS);
    const { desktopSmall } = inject(TUI_MEDIA);
    const media = win.matchMedia(`screen and (min-width: ${(desktopSmall - 1) / 16}em)`);
    return tuiTypedFromEvent(media, 'change').pipe(startWith(null), switchMap(() => combineLatest([
        of(Number(media.matches)),
        cardNumberTexts,
        expiryTexts,
        cvcTexts,
    ])), map(([index, cardNumber, expiry, cvcTexts]) => ({
        cardNumberText: cardNumber[index] ?? '',
        expiryText: expiry[index] ?? '',
        cvcText: cvcTexts[index] ?? '',
    })));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtY2FyZC1ncm91cC5wcm92aWRlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hZGRvbi1jb21tZXJjZS9jb21wb25lbnRzL2lucHV0LWNhcmQtZ3JvdXAvaW5wdXQtY2FyZC1ncm91cC5wcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNyQyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDOUMsT0FBTyxFQUNILGtCQUFrQixFQUNsQixxQkFBcUIsRUFDckIscUJBQXFCLEdBQ3hCLE1BQU0saUNBQWlDLENBQUM7QUFDekMsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDNUQsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFDNUUsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRWhELE9BQU8sRUFBQyxhQUFhLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBUWxFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcseUJBQXlCLENBRWpFLEdBQUcsRUFBRTtJQUNILE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM5QixNQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUN0RCxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUNsRCxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUM1QyxNQUFNLEVBQUMsWUFBWSxFQUFDLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRXpDLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsMEJBQTBCLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFckYsT0FBTyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUMxQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQ2YsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUNYLGFBQWEsQ0FBQztRQUNWLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pCLGVBQWU7UUFDZixXQUFXO1FBQ1gsUUFBUTtLQUNYLENBQUMsQ0FDTCxFQUNELEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDNUMsY0FBYyxFQUFFLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFO1FBQ3ZDLFVBQVUsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtRQUMvQixPQUFPLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUU7S0FDakMsQ0FBQyxDQUFDLENBQ04sQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtpbmplY3R9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtXQV9XSU5ET1d9IGZyb20gJ0BuZy13ZWItYXBpcy9jb21tb24nO1xuaW1wb3J0IHtcbiAgICBUVUlfQ0FSRF9DVkNfVEVYVFMsXG4gICAgVFVJX0NBUkRfRVhQSVJZX1RFWFRTLFxuICAgIFRVSV9DQVJEX05VTUJFUl9URVhUUyxcbn0gZnJvbSAnQHRhaWdhLXVpL2FkZG9uLWNvbW1lcmNlL3Rva2Vucyc7XG5pbXBvcnQge3R1aVR5cGVkRnJvbUV2ZW50fSBmcm9tICdAdGFpZ2EtdWkvY2RrL29ic2VydmFibGVzJztcbmltcG9ydCB7dHVpQ3JlYXRlVG9rZW5Gcm9tRmFjdG9yeX0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9taXNjZWxsYW5lb3VzJztcbmltcG9ydCB7VFVJX01FRElBfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90b2tlbnMnO1xuaW1wb3J0IHR5cGUge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtjb21iaW5lTGF0ZXN0LCBtYXAsIG9mLCBzdGFydFdpdGgsIHN3aXRjaE1hcH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHVpQ2FyZEdyb3VwZWRUZXh0cyB7XG4gICAgcmVhZG9ubHkgY2FyZE51bWJlclRleHQ6IHN0cmluZztcbiAgICByZWFkb25seSBjdmNUZXh0OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgZXhwaXJ5VGV4dDogc3RyaW5nO1xufVxuXG4vKipcbiAqIElucHV0Q2FyZEdyb3VwIHRleHRzXG4gKi9cbmV4cG9ydCBjb25zdCBUVUlfSU5QVVRfQ0FSRF9HUk9VUF9URVhUUyA9IHR1aUNyZWF0ZVRva2VuRnJvbUZhY3Rvcnk8XG4gICAgT2JzZXJ2YWJsZTxUdWlDYXJkR3JvdXBlZFRleHRzPlxuPigoKSA9PiB7XG4gICAgY29uc3Qgd2luID0gaW5qZWN0KFdBX1dJTkRPVyk7XG4gICAgY29uc3QgY2FyZE51bWJlclRleHRzID0gaW5qZWN0KFRVSV9DQVJEX05VTUJFUl9URVhUUyk7XG4gICAgY29uc3QgZXhwaXJ5VGV4dHMgPSBpbmplY3QoVFVJX0NBUkRfRVhQSVJZX1RFWFRTKTtcbiAgICBjb25zdCBjdmNUZXh0cyA9IGluamVjdChUVUlfQ0FSRF9DVkNfVEVYVFMpO1xuICAgIGNvbnN0IHtkZXNrdG9wU21hbGx9ID0gaW5qZWN0KFRVSV9NRURJQSk7XG5cbiAgICBjb25zdCBtZWRpYSA9IHdpbi5tYXRjaE1lZGlhKGBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICR7KGRlc2t0b3BTbWFsbCAtIDEpIC8gMTZ9ZW0pYCk7XG5cbiAgICByZXR1cm4gdHVpVHlwZWRGcm9tRXZlbnQobWVkaWEsICdjaGFuZ2UnKS5waXBlKFxuICAgICAgICBzdGFydFdpdGgobnVsbCksXG4gICAgICAgIHN3aXRjaE1hcCgoKSA9PlxuICAgICAgICAgICAgY29tYmluZUxhdGVzdChbXG4gICAgICAgICAgICAgICAgb2YoTnVtYmVyKG1lZGlhLm1hdGNoZXMpKSxcbiAgICAgICAgICAgICAgICBjYXJkTnVtYmVyVGV4dHMsXG4gICAgICAgICAgICAgICAgZXhwaXJ5VGV4dHMsXG4gICAgICAgICAgICAgICAgY3ZjVGV4dHMsXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgKSxcbiAgICAgICAgbWFwKChbaW5kZXgsIGNhcmROdW1iZXIsIGV4cGlyeSwgY3ZjVGV4dHNdKSA9PiAoe1xuICAgICAgICAgICAgY2FyZE51bWJlclRleHQ6IGNhcmROdW1iZXJbaW5kZXhdID8/ICcnLFxuICAgICAgICAgICAgZXhwaXJ5VGV4dDogZXhwaXJ5W2luZGV4XSA/PyAnJyxcbiAgICAgICAgICAgIGN2Y1RleHQ6IGN2Y1RleHRzW2luZGV4XSA/PyAnJyxcbiAgICAgICAgfSkpLFxuICAgICk7XG59KTtcbiJdfQ==