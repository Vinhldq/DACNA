import { inject, Pipe } from '@angular/core';
import { tuiFormatCurrency } from '@taiga-ui/addon-commerce/utils';
import { CHAR_NO_BREAK_SPACE } from '@taiga-ui/cdk/constants';
import { TUI_NUMBER_FORMAT } from '@taiga-ui/core/tokens';
import { tuiFormatNumber } from '@taiga-ui/core/utils/format';
import { map } from 'rxjs';
import { TUI_AMOUNT_OPTIONS } from './amount.options';
import { tuiFormatSignSymbol } from './amount.utils';
import * as i0 from "@angular/core";
const DEFAULT_PRECISION = 2;
class TuiAmountPipe {
    constructor() {
        this.options = inject(TUI_AMOUNT_OPTIONS);
        this.format = inject(TUI_NUMBER_FORMAT);
    }
    transform(value, currency = this.options.currency, currencyAlign = this.options.currencyAlign) {
        return this.format.pipe(map((format) => {
            const currencySymbol = tuiFormatCurrency(currency);
            const formatted = tuiFormatNumber(Math.abs(value), {
                ...format,
                precision: Number.isNaN(format.precision)
                    ? DEFAULT_PRECISION
                    : format.precision,
            });
            const sign = formatted === '0'
                ? ''
                : tuiFormatSignSymbol(value, this.options.sign);
            const space = currencySymbol &&
                (currencySymbol?.length > 1 || currencyAlign === 'right')
                ? CHAR_NO_BREAK_SPACE
                : '';
            return currencyAlign === 'right'
                ? `${sign}${formatted}${space}${currencySymbol}`
                : `${sign}${currencySymbol}${space}${formatted}`;
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiAmountPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: TuiAmountPipe, isStandalone: true, name: "tuiAmount" }); }
}
export { TuiAmountPipe };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiAmountPipe, decorators: [{
            type: Pipe,
            args: [{ standalone: true, name: 'tuiAmount' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1vdW50LnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hZGRvbi1jb21tZXJjZS9waXBlcy9hbW91bnQvYW1vdW50LnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFDakUsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDNUQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFFeEQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBRTVELE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFekIsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDcEQsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7O0FBRW5ELE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0FBRTVCLE1BQ2EsYUFBYTtJQUQxQjtRQUVxQixZQUFPLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDckMsV0FBTSxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0tBZ0N2RDtJQTlCVSxTQUFTLENBQ1osS0FBYSxFQUNiLFdBQWdDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUNyRCxnQkFBd0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhO1FBRWxFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ25CLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ1gsTUFBTSxjQUFjLEdBQUcsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbkQsTUFBTSxTQUFTLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQy9DLEdBQUcsTUFBTTtnQkFDVCxTQUFTLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDO29CQUNyQyxDQUFDLENBQUMsaUJBQWlCO29CQUNuQixDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVM7YUFDekIsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxJQUFJLEdBQ04sU0FBUyxLQUFLLEdBQUc7Z0JBQ2IsQ0FBQyxDQUFDLEVBQUU7Z0JBQ0osQ0FBQyxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3hELE1BQU0sS0FBSyxHQUNQLGNBQWM7Z0JBQ2QsQ0FBQyxjQUFjLEVBQUUsTUFBTSxHQUFHLENBQUMsSUFBSSxhQUFhLEtBQUssT0FBTyxDQUFDO2dCQUNyRCxDQUFDLENBQUMsbUJBQW1CO2dCQUNyQixDQUFDLENBQUMsRUFBRSxDQUFDO1lBRWIsT0FBTyxhQUFhLEtBQUssT0FBTztnQkFDNUIsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLFNBQVMsR0FBRyxLQUFLLEdBQUcsY0FBYyxFQUFFO2dCQUNoRCxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsY0FBYyxHQUFHLEtBQUssR0FBRyxTQUFTLEVBQUUsQ0FBQztRQUN6RCxDQUFDLENBQUMsQ0FDTCxDQUFDO0lBQ04sQ0FBQzsrR0FqQ1EsYUFBYTs2R0FBYixhQUFhOztTQUFiLGFBQWE7NEZBQWIsYUFBYTtrQkFEekIsSUFBSTttQkFBQyxFQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHtQaXBlVHJhbnNmb3JtfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7aW5qZWN0LCBQaXBlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB0eXBlIHtUdWlDdXJyZW5jeVZhcmlhbnRzfSBmcm9tICdAdGFpZ2EtdWkvYWRkb24tY29tbWVyY2UvdHlwZXMnO1xuaW1wb3J0IHt0dWlGb3JtYXRDdXJyZW5jeX0gZnJvbSAnQHRhaWdhLXVpL2FkZG9uLWNvbW1lcmNlL3V0aWxzJztcbmltcG9ydCB7Q0hBUl9OT19CUkVBS19TUEFDRX0gZnJvbSAnQHRhaWdhLXVpL2Nkay9jb25zdGFudHMnO1xuaW1wb3J0IHtUVUlfTlVNQkVSX0ZPUk1BVH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdG9rZW5zJztcbmltcG9ydCB0eXBlIHtUdWlIb3Jpem9udGFsRGlyZWN0aW9ufSBmcm9tICdAdGFpZ2EtdWkvY29yZS90eXBlcyc7XG5pbXBvcnQge3R1aUZvcm1hdE51bWJlcn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdXRpbHMvZm9ybWF0JztcbmltcG9ydCB0eXBlIHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtUVUlfQU1PVU5UX09QVElPTlN9IGZyb20gJy4vYW1vdW50Lm9wdGlvbnMnO1xuaW1wb3J0IHt0dWlGb3JtYXRTaWduU3ltYm9sfSBmcm9tICcuL2Ftb3VudC51dGlscyc7XG5cbmNvbnN0IERFRkFVTFRfUFJFQ0lTSU9OID0gMjtcblxuQFBpcGUoe3N0YW5kYWxvbmU6IHRydWUsIG5hbWU6ICd0dWlBbW91bnQnfSlcbmV4cG9ydCBjbGFzcyBUdWlBbW91bnRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zID0gaW5qZWN0KFRVSV9BTU9VTlRfT1BUSU9OUyk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBmb3JtYXQgPSBpbmplY3QoVFVJX05VTUJFUl9GT1JNQVQpO1xuXG4gICAgcHVibGljIHRyYW5zZm9ybShcbiAgICAgICAgdmFsdWU6IG51bWJlcixcbiAgICAgICAgY3VycmVuY3k6IFR1aUN1cnJlbmN5VmFyaWFudHMgPSB0aGlzLm9wdGlvbnMuY3VycmVuY3ksXG4gICAgICAgIGN1cnJlbmN5QWxpZ246IFR1aUhvcml6b250YWxEaXJlY3Rpb24gPSB0aGlzLm9wdGlvbnMuY3VycmVuY3lBbGlnbixcbiAgICApOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQucGlwZShcbiAgICAgICAgICAgIG1hcCgoZm9ybWF0KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVuY3lTeW1ib2wgPSB0dWlGb3JtYXRDdXJyZW5jeShjdXJyZW5jeSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVkID0gdHVpRm9ybWF0TnVtYmVyKE1hdGguYWJzKHZhbHVlKSwge1xuICAgICAgICAgICAgICAgICAgICAuLi5mb3JtYXQsXG4gICAgICAgICAgICAgICAgICAgIHByZWNpc2lvbjogTnVtYmVyLmlzTmFOKGZvcm1hdC5wcmVjaXNpb24pXG4gICAgICAgICAgICAgICAgICAgICAgICA/IERFRkFVTFRfUFJFQ0lTSU9OXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGZvcm1hdC5wcmVjaXNpb24sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2lnbiA9XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZCA9PT0gJzAnXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHR1aUZvcm1hdFNpZ25TeW1ib2wodmFsdWUsIHRoaXMub3B0aW9ucy5zaWduKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzcGFjZSA9XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbmN5U3ltYm9sICYmXG4gICAgICAgICAgICAgICAgICAgIChjdXJyZW5jeVN5bWJvbD8ubGVuZ3RoID4gMSB8fCBjdXJyZW5jeUFsaWduID09PSAncmlnaHQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBDSEFSX05PX0JSRUFLX1NQQUNFXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICcnO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbmN5QWxpZ24gPT09ICdyaWdodCdcbiAgICAgICAgICAgICAgICAgICAgPyBgJHtzaWdufSR7Zm9ybWF0dGVkfSR7c3BhY2V9JHtjdXJyZW5jeVN5bWJvbH1gXG4gICAgICAgICAgICAgICAgICAgIDogYCR7c2lnbn0ke2N1cnJlbmN5U3ltYm9sfSR7c3BhY2V9JHtmb3JtYXR0ZWR9YDtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==