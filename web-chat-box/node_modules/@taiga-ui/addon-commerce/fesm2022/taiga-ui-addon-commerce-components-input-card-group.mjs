import { __decorate } from 'tslib';
import { NgIf } from '@angular/common';
import * as i0 from '@angular/core';
import { inject, computed, EventEmitter, Component, ChangeDetectionStrategy, ViewChild, Input, Output } from '@angular/core';
import { toSignal, takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i4 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import { MaskitoDirective } from '@maskito/angular';
import { WaResizeObserver } from '@ng-web-apis/resize-observer';
import { tuiDefaultCardValidator, TUI_MASK_CVC, TUI_MASK_CARD, TUI_MASK_EXPIRE } from '@taiga-ui/addon-commerce/constants';
import { TuiFormatCardPipe } from '@taiga-ui/addon-commerce/pipes';
import { TUI_CARD_NUMBER_TEXTS, TUI_CARD_EXPIRY_TEXTS, TUI_CARD_CVC_TEXTS, TUI_PAYMENT_SYSTEM_ICONS } from '@taiga-ui/addon-commerce/tokens';
import { TuiControl, tuiAsControl } from '@taiga-ui/cdk/classes';
import { TUI_NON_DIGIT_REGEXP } from '@taiga-ui/cdk/constants';
import { TuiActiveZone } from '@taiga-ui/cdk/directives/active-zone';
import { tuiHovered, TuiHoveredService } from '@taiga-ui/cdk/directives/hovered';
import { TuiLet } from '@taiga-ui/cdk/directives/let';
import { tuiTypedFromEvent } from '@taiga-ui/cdk/observables';
import { TuiMapperPipe } from '@taiga-ui/cdk/pipes/mapper';
import { tuiInjectId } from '@taiga-ui/cdk/services';
import { TUI_IS_WEBKIT } from '@taiga-ui/cdk/tokens';
import { tuiInjectElement, tuiIsElement, tuiIsInput } from '@taiga-ui/cdk/utils/dom';
import { tuiIsNativeFocusedIn, tuiIsNativeFocused } from '@taiga-ui/cdk/utils/focus';
import { tuiCreateToken, tuiProvideOptions, tuiCreateTokenFromFactory, tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiAsDataListHost } from '@taiga-ui/core/components/data-list';
import { TuiIcon, TuiIconPipe } from '@taiga-ui/core/components/icon';
import * as i3 from '@taiga-ui/core/components/textfield';
import { TUI_TEXTFIELD_OPTIONS, TuiWithTextfieldDropdown } from '@taiga-ui/core/components/textfield';
import * as i1 from '@taiga-ui/core/directives/appearance';
import { tuiAppearanceMode, tuiAppearance, tuiAppearanceState, tuiAppearanceFocus, TuiAppearance } from '@taiga-ui/core/directives/appearance';
import * as i2 from '@taiga-ui/core/directives/dropdown';
import { TuiDropdownDirective, tuiDropdownOpen, tuiDropdownOptionsProvider, TuiWithDropdownOpen } from '@taiga-ui/core/directives/dropdown';
import { TUI_MEDIA, TUI_COMMON_ICONS } from '@taiga-ui/core/tokens';
import { TuiChevron } from '@taiga-ui/kit/directives/chevron';
import { PolymorpheusOutlet, PolymorpheusTemplate } from '@taiga-ui/polymorpheus';
import { startWith, switchMap, combineLatest, of, map, Subject, merge, timer, EMPTY } from 'rxjs';
import { TUI_INPUT_CARD_DEFAULT_OPTIONS } from '@taiga-ui/addon-commerce/components/input-card';
import { WA_WINDOW } from '@ng-web-apis/common';

const TUI_INPUT_CARD_GROUP_DEFAULT_OPTIONS = {
    ...TUI_INPUT_CARD_DEFAULT_OPTIONS,
    cardValidator: tuiDefaultCardValidator,
    exampleText: '0000 0000 0000 0000',
    exampleTextCVC: '000',
    cvcHidden: true,
    inputs: { cvc: true, expire: true },
};
const TUI_INPUT_CARD_GROUP_OPTIONS = tuiCreateToken(TUI_INPUT_CARD_GROUP_DEFAULT_OPTIONS);
function tuiInputCardGroupOptionsProvider(options) {
    return tuiProvideOptions(TUI_INPUT_CARD_GROUP_OPTIONS, options, TUI_INPUT_CARD_GROUP_DEFAULT_OPTIONS);
}

/**
 * InputCardGroup texts
 */
const TUI_INPUT_CARD_GROUP_TEXTS = tuiCreateTokenFromFactory(() => {
    const win = inject(WA_WINDOW);
    const cardNumberTexts = inject(TUI_CARD_NUMBER_TEXTS);
    const expiryTexts = inject(TUI_CARD_EXPIRY_TEXTS);
    const cvcTexts = inject(TUI_CARD_CVC_TEXTS);
    const { desktopSmall } = inject(TUI_MEDIA);
    const media = win.matchMedia(`screen and (min-width: ${(desktopSmall - 1) / 16}em)`);
    return tuiTypedFromEvent(media, 'change').pipe(startWith(null), switchMap(() => combineLatest([
        of(Number(media.matches)),
        cardNumberTexts,
        expiryTexts,
        cvcTexts,
    ])), map(([index, cardNumber, expiry, cvcTexts]) => ({
        cardNumberText: cardNumber[index] ?? '',
        expiryText: expiry[index] ?? '',
        cvcText: cvcTexts[index] ?? '',
    })));
});

class TuiInputCardGroup extends TuiControl {
    constructor() {
        super(...arguments);
        this.focus$ = new Subject();
        this.expirePrefilled = false;
        this.paymentSystems = inject(TUI_PAYMENT_SYSTEM_ICONS);
        this.options = inject(TUI_INPUT_CARD_GROUP_OPTIONS);
        this.el = tuiInjectElement();
        this.hover = tuiHovered();
        this.focusedIn = toSignal(merge(tuiTypedFromEvent(this.el, 'focusin'), tuiTypedFromEvent(this.el, 'focusout')).pipe(map(() => tuiIsNativeFocusedIn(this.el))), { initialValue: false });
        this.exampleTextCVC = this.options.exampleTextCVC;
        this.cvcHidden = this.options.cvcHidden;
        this.maskCVC = TUI_MASK_CVC(3);
        this.dropdown = inject(TuiDropdownDirective);
        this.maskCard = TUI_MASK_CARD;
        this.maskExpire = TUI_MASK_EXPIRE;
        this.icons = inject(TUI_COMMON_ICONS);
        this.texts = toSignal(inject(TUI_INPUT_CARD_GROUP_TEXTS));
        this.open = tuiDropdownOpen();
        this.$ = inject(TUI_IS_WEBKIT)
            ? this.focus$
                .pipe(switchMap(() => timer(100)), takeUntilDestroyed())
                .subscribe(() => (this.expire ? this.focusCVC() : this.focusExpire()))
            : EMPTY;
        this.m = tuiAppearanceMode(this.mode);
        this.appearance = tuiAppearance(inject(TUI_TEXTFIELD_OPTIONS).appearance);
        this.state = tuiAppearanceState(
        // eslint-disable-next-line no-nested-ternary
        computed(() => (this.disabled() ? 'disabled' : this.hover() ? 'hover' : null)));
        this.focus = tuiAppearanceFocus(computed(() => this.open() || this.focusedIn()));
        this.labelRaised = computed(() => (this.focus() && !this.readOnly()) || !!this.value()?.card);
        this.hasCleaner = computed(() => !!this.value()?.card && this.interactive());
        /**
         * @deprecated use 'placeholder' instead
         */
        this.exampleText = this.options.exampleText;
        this.placeholder = this.options.exampleText;
        this.inputs = this.options.inputs;
        this.cardValidator = this.options.cardValidator;
        this.icon = this.options.icon;
        this.id = tuiInjectId();
        this.autocomplete = this.options.autocomplete;
        this.binChange = new EventEmitter();
    }
    set codeLength(length) {
        this.exampleTextCVC = '0'.repeat(length);
        this.maskCVC = TUI_MASK_CVC(length);
    }
    get bin() {
        return this.card.length < 6 ? null : this.card.slice(0, 6);
    }
    writeValue(value) {
        const { bin } = this;
        super.writeValue(value);
        this.updateBin(bin);
        this.expirePrefilled = !!this.expire && this.cardPrefilled;
    }
    /** Public API for manual focus management */
    focusCard() {
        this.inputCard?.nativeElement.focus({ preventScroll: true });
    }
    focusExpire() {
        if (this.inputs.expire) {
            this.inputExpire?.nativeElement.focus({ preventScroll: true });
        }
        else {
            this.inputCVC?.nativeElement.focus({ preventScroll: true });
        }
    }
    focusCVC() {
        this.inputCVC?.nativeElement.focus({ preventScroll: true });
    }
    handleOption(option) {
        const { card = '', expire = '', cvc = '' } = option || {};
        const { bin } = this;
        const element = (!card && this.inputCard?.nativeElement) ||
            (!expire && this.inputExpire?.nativeElement) ||
            this.inputCVC?.nativeElement;
        this.onChange({ card, expire, cvc });
        this.updateBin(bin);
        this.open.set(false);
        this.expirePrefilled = !!expire;
        element?.focus();
    }
    clear() {
        this.expirePrefilled = false;
        [this.inputCVC, this.inputExpire, this.inputCard].forEach((e) => {
            e?.nativeElement.focus();
            e?.nativeElement.select();
            e?.nativeElement.ownerDocument.execCommand('delete');
        });
        this.onChange(null);
    }
    onResize() {
        this.cdr.detectChanges();
    }
    get content() {
        const system = this.getPaymentSystem(this.card);
        return this.icon || (system && this.paymentSystems[system]);
    }
    get card() {
        return this.value()?.card || '';
    }
    get expire() {
        return this.value()?.expire || '';
    }
    get cvc() {
        return this.value()?.cvc || '';
    }
    get cardCollapsed() {
        return (this.isFocusable(this.card) &&
            !tuiIsNativeFocused(this.inputCard?.nativeElement));
    }
    get tailLength() {
        return this.card.length % 4 > 0 ? 5 : 4;
    }
    get cardPrefilled() {
        return !!this.card.match(TUI_NON_DIGIT_REGEXP);
    }
    get cvcPrefilled() {
        return !this.inputs.cvc || !!this.cvc.match(TUI_NON_DIGIT_REGEXP);
    }
    get cardFocusable() {
        return !this.cardPrefilled;
    }
    get expireFocusable() {
        return this.isFocusable(this.card) && !this.expirePrefilled;
    }
    get cvcFocusable() {
        return this.isFocusable(this.card);
    }
    get masked() {
        return this.cardPrefilled ? `*${this.card.slice(-4)}` : '*';
    }
    onCardChange(card) {
        const { value, bin } = this;
        const parsed = card.split(' ').join('');
        if (value()?.card === parsed) {
            return;
        }
        this.updateProperty(parsed, 'card');
        this.updateBin(bin);
        if (this.cardValidator(this.card) && !value()?.expire && this.inputExpire) {
            this.focusExpire();
            // Safari autofill focus jerk workaround
            this.focus$.next();
        }
    }
    onExpireChange(expire) {
        this.updateProperty(expire, 'expire');
        if (Number(this.inputExpire?.nativeElement.selectionStart) === 5 // MM/YY
        ) {
            this.focusCVC();
        }
    }
    onCVCChange(cvc) {
        this.updateProperty(cvc, 'cvc');
    }
    transform({ offsetWidth }) {
        return this.cardCollapsed ? `translate3d(${offsetWidth}px, 0, 0)` : '';
    }
    onMouseDown(event) {
        if (tuiIsElement(event.target) && tuiIsInput(event.target)) {
            return;
        }
        event.preventDefault();
        this.focusInput();
    }
    toggle() {
        this.open.set(!this.open());
    }
    isFocusable(card) {
        return this.cardValidator(card) || this.cardPrefilled;
    }
    getPaymentSystem(value) {
        return this.options.paymentSystemHandler(value);
    }
    updateBin(oldBin) {
        const { bin } = this;
        if (bin !== oldBin && !this.cardPrefilled) {
            this.binChange.emit(bin);
        }
    }
    updateProperty(value, propName) {
        const { card = '', expire = '', cvc = '' } = this.value() || {};
        const newValue = { card, expire, cvc };
        newValue[propName] = value;
        this.onChange(newValue.expire || newValue.cvc || newValue.card ? newValue : null);
    }
    focusInput() {
        const element = (this.cardFocusable && this.inputCard?.nativeElement) ||
            (this.expireFocusable && this.inputExpire?.nativeElement) ||
            this.inputCVC?.nativeElement;
        element?.focus();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputCardGroup, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputCardGroup, isStandalone: true, selector: "tui-input-card-group", inputs: { exampleText: "exampleText", placeholder: "placeholder", inputs: "inputs", cardValidator: "cardValidator", icon: "icon", id: "id", autocomplete: "autocomplete", codeLength: "codeLength" }, outputs: { binChange: "binChange" }, host: { attributes: { "data-size": "l" }, listeners: { "mousedown": "onMouseDown($event)", "scroll.zoneless": "$event.target.scrollLeft = 0" } }, providers: [
            tuiAsDataListHost(TuiInputCardGroup),
            tuiAsControl(TuiInputCardGroup),
            tuiDropdownOptionsProvider({ limitWidth: 'fixed' }),
            TuiHoveredService,
        ], viewQueries: [{ propertyName: "inputCard", first: true, predicate: ["inputCard"], descendants: true }, { propertyName: "inputExpire", first: true, predicate: ["inputExpire"], descendants: true }, { propertyName: "inputCVC", first: true, predicate: ["inputCVC"], descendants: true }], usesInheritance: true, hostDirectives: [{ directive: i1.TuiAppearance }, { directive: i2.TuiDropdownDirective }, { directive: i3.TuiWithTextfieldDropdown }, { directive: i2.TuiWithDropdownOpen }], ngImport: i0, template: "<div class=\"t-wrapper\">\n    <label\n        *tuiLet=\"value()?.card | tuiFormatCard: cardPrefilled as formattedCard\"\n        (click.zoneless.prevent)=\"(0)\"\n    >\n        <input\n            #inputCard\n            automation-id=\"tui-input-card-group__card\"\n            inputmode=\"numeric\"\n            translate=\"no\"\n            type=\"text\"\n            class=\"t-input t-input_card\"\n            [attr.aria-invalid]=\"!cardPrefilled && !(this.card | tuiMapper: cardValidator)\"\n            [attr.id]=\"id + '_card'\"\n            [autocomplete]=\"autocomplete ? 'cc-number' : 'off'\"\n            [class.t-input_filled]=\"card.length\"\n            [class.t-input_inert]=\"cardPrefilled\"\n            [disabled]=\"disabled()\"\n            [maskito]=\"maskCard\"\n            [ngModel]=\"formattedCard\"\n            [ngModelOptions]=\"{standalone: true}\"\n            [placeholder]=\"cardPrefilled ? '' : placeholder || exampleText\"\n            [readOnly]=\"readOnly()\"\n            [tabIndex]=\"cardFocusable ? 0 : -1\"\n            (focus)=\"(0)\"\n            (ngModelChange)=\"onCardChange($event)\"\n        />\n        <span\n            aria-hidden=\"true\"\n            translate=\"no\"\n            class=\"t-collapsed\"\n            [attr.data-before]=\"masked\"\n            [class.t-collapsed_enable-mask]=\"cardCollapsed\"\n            (waResizeObserver)=\"onResize()\"\n        >\n            <span\n                #ghost\n                class=\"t-ghost\"\n                [textContent]=\"formattedCard.slice(-tailLength)\"\n            ></span>\n\n            <span class=\"t-collapsed-wrapper\">\n                <span\n                    class=\"t-value\"\n                    [style.transform]=\"transform(ghost)\"\n                >\n                    {{ formattedCard }}\n                </span>\n            </span>\n        </span>\n        <div\n            class=\"t-label\"\n            [class.t-label_raised]=\"labelRaised()\"\n        >\n            {{ texts()?.cardNumberText }}\n        </div>\n    </label>\n</div>\n<div\n    class=\"t-wrapper t-wrapper_expire\"\n    [class.t-wrapper_active]=\"cardCollapsed\"\n>\n    <label (click.zoneless.prevent)=\"(0)\">\n        <input\n            #inputExpire\n            automation-id=\"tui-input-card-group__expire\"\n            inputmode=\"numeric\"\n            maxlength=\"5\"\n            translate=\"no\"\n            class=\"t-input\"\n            [attr.id]=\"id + '_expire'\"\n            [attr.name]=\"autocomplete ? 'ccexpiryyear' : null\"\n            [autocomplete]=\"autocomplete ? 'cc-exp' : 'off'\"\n            [class.t-input_inert]=\"!expireFocusable\"\n            [class.t-input_prefilled]=\"!inputs.expire\"\n            [disabled]=\"disabled()\"\n            [maskito]=\"maskExpire\"\n            [ngModel]=\"expire\"\n            [ngModelOptions]=\"{standalone: true}\"\n            [placeholder]=\"inputs.expire ? '00/00' : '\u2022\u2022/\u2022\u2022'\"\n            [readOnly]=\"readOnly() || !inputs.expire\"\n            [tabIndex]=\"expireFocusable ? 0 : -1\"\n            (focus)=\"(0)\"\n            (ngModelChange)=\"onExpireChange($event)\"\n        />\n        <div\n            class=\"t-label\"\n            [class.t-label_raised]=\"labelRaised()\"\n        >\n            {{ texts()?.expiryText }}\n        </div>\n    </label>\n</div>\n<div\n    class=\"t-wrapper t-wrapper_cvc\"\n    [class.t-wrapper_active]=\"cardCollapsed\"\n>\n    <label (click.zoneless.prevent)=\"(0)\">\n        <input\n            #inputCVC\n            automation-id=\"tui-input-card-group__cvc\"\n            inputmode=\"numeric\"\n            translate=\"no\"\n            type=\"text\"\n            class=\"t-input\"\n            [attr.id]=\"id + '_cvc'\"\n            [autocomplete]=\"autocomplete ? 'cc-csc' : 'off'\"\n            [class.t-input_cvc_hidden]=\"cvcHidden\"\n            [class.t-input_prefilled]=\"cvcPrefilled\"\n            [disabled]=\"disabled()\"\n            [maskito]=\"maskCVC\"\n            [ngModel]=\"cvc\"\n            [ngModelOptions]=\"{standalone: true}\"\n            [placeholder]=\"cvcPrefilled ? '\u2022\u2022\u2022' : exampleTextCVC\"\n            [readOnly]=\"readOnly() || cvcPrefilled\"\n            [tabIndex]=\"cvcFocusable ? 0 : -1\"\n            (focus)=\"(0)\"\n            (ngModelChange)=\"onCVCChange($event)\"\n        />\n        <div\n            class=\"t-label\"\n            [class.t-label_raised]=\"labelRaised()\"\n        >\n            {{ texts()?.cvcText }}\n        </div>\n    </label>\n</div>\n<div class=\"t-icons\">\n    <div\n        *ngIf=\"content\"\n        class=\"t-icon-outlet\"\n    >\n        <img\n            *polymorpheusOutlet=\"content as src\"\n            alt=\"\"\n            automation-id=\"tui-input-card-group__icon\"\n            class=\"t-card\"\n            [src]=\"src | tuiIcon\"\n        />\n    </div>\n    <tui-icon\n        *ngIf=\"hasCleaner()\"\n        automation-id=\"tui-input-card-group__cleaner\"\n        tuiAppearance=\"icon\"\n        class=\"t-icon\"\n        [icon]=\"icons.close\"\n        (click)=\"clear()\"\n    />\n    <tui-icon\n        *ngIf=\"dropdown.content\"\n        automation-id=\"tui-input-card-group__dropdown\"\n        tuiAppearance=\"icon\"\n        tuiChevron\n        (click)=\"toggle()\"\n    />\n</div>\n", styles: [":host{position:relative;display:block;block-size:var(--tui-height-l);inline-size:29.5rem;border-radius:var(--tui-radius-l);overflow:hidden}:host :host-context(tui-root._mobile){inline-size:18rem}:host[tuiAppearance][data-appearance]:has(:-webkit-autofill){background:var(--tui-service-autofill-background)!important}.t-outline{block-size:100%;inline-size:100%}.t-wrapper{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;inline-size:100%;block-size:100%}.t-wrapper_cvc{margin-left:7.1875rem;transform:translate3d(100%,0,0)}:host-context(tui-root._mobile) .t-wrapper_cvc{margin-left:4.0625rem}.t-wrapper_expire{transform:translate3d(100%,0,0)}.t-wrapper_active{transform:translate3d(6.5625rem,0,0)}:host-context(tui-root._mobile) .t-wrapper_active{transform:translate3d(4.125rem,0,0)}.t-card{inline-size:2rem;block-size:2rem}.t-collapsed{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;padding:1.25rem var(--tui-padding-l) 0;box-sizing:border-box;font:var(--tui-font-text-m);line-height:2.25rem;color:var(--tui-text-primary);white-space:nowrap;pointer-events:none}.t-collapsed_enable-mask:before{content:attr(data-before)}.t-collapsed_enable-mask .t-collapsed-wrapper{left:1.375rem}.t-collapsed-wrapper{position:absolute;top:0;display:block;inline-size:100%;block-size:100%;overflow:hidden}.t-value{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;bottom:0;right:100%;display:block;transform:translate3d(100%,0,0)}.t-input{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;border:0;margin:0;padding:1.25rem var(--tui-padding-l) 0;outline:none;background:transparent;box-sizing:border-box;font:var(--tui-font-text-m);color:var(--tui-text-primary)}.t-input::placeholder{color:var(--tui-text-tertiary)}.t-input_prefilled::placeholder{color:var(--tui-text-primary)}.t-input[chrome-autofilled],.t-input:-webkit-autofill{-webkit-text-fill-color:var(--tui-text-primary)!important;caret-color:var(--tui-text-primary)!important;-webkit-transition:background-color 600000s 0s;transition:background-color 600000s 0s}.t-input.t-input.t-input_card:not(:-webkit-autofill):not(:focus:placeholder-shown),.t-input.t-input.t-input_card.t-input_filled{caret-color:var(--tui-text-primary);color:transparent!important;-webkit-text-fill-color:transparent!important}.t-input.t-input.t-input_card::-webkit-credit-card-auto-fill-button{content:none!important;position:absolute;left:-62.4375rem;top:-62.4375rem;z-index:-999;display:none!important;background:transparent!important;pointer-events:none!important}.t-input_inert{pointer-events:none}.t-input_cvc_hidden{-webkit-text-security:disc}.t-icons{position:absolute;right:.75rem;display:flex;align-items:center;block-size:100%}.t-icon-outlet{display:flex;margin-right:.25rem}.t-icon{cursor:pointer;border-width:.25rem}.t-label{transition-property:all;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;position:relative;margin:1.125rem 1rem;font:var(--tui-font-text-m);line-height:1.25rem;color:var(--tui-text-secondary)}input:-webkit-autofill~.t-label,.t-label_raised{font-size:.8156rem;transform:translateY(-.7em)}:host([data-mode~=\"invalid\"]) .t-label{color:var(--tui-text-negative)}:host([data-focus=\"true\"]) .t-label{color:var(--tui-text-primary)}.t-ghost{visibility:hidden}\n"], dependencies: [{ kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { kind: "directive", type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: MaskitoDirective, selector: "[maskito]", inputs: ["maskito", "maskitoElement"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "directive", type: TuiAppearance, selector: "[tuiAppearance]", inputs: ["tuiAppearance", "tuiAppearanceState", "tuiAppearanceFocus", "tuiAppearanceMode"] }, { kind: "directive", type: TuiChevron, selector: "[tuiChevron]", inputs: ["tuiChevron"] }, { kind: "pipe", type: TuiFormatCardPipe, name: "tuiFormatCard" }, { kind: "component", type: TuiIcon, selector: "tui-icon", inputs: ["icon", "background"] }, { kind: "pipe", type: TuiIconPipe, name: "tuiIcon" }, { kind: "directive", type: TuiLet, selector: "[tuiLet]", inputs: ["tuiLet"] }, { kind: "pipe", type: TuiMapperPipe, name: "tuiMapper" }, { kind: "directive", type: WaResizeObserver, selector: "[waResizeObserver]", inputs: ["box"], outputs: ["waResizeObserver"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    tuiPure
], TuiInputCardGroup.prototype, "isFocusable", null);
__decorate([
    tuiPure
], TuiInputCardGroup.prototype, "getPaymentSystem", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputCardGroup, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'tui-input-card-group', imports: [
                        FormsModule,
                        MaskitoDirective,
                        NgIf,
                        PolymorpheusOutlet,
                        PolymorpheusTemplate,
                        TuiActiveZone,
                        TuiAppearance,
                        TuiChevron,
                        TuiFormatCardPipe,
                        TuiIcon,
                        TuiIconPipe,
                        TuiLet,
                        TuiMapperPipe,
                        WaResizeObserver,
                    ], changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsDataListHost(TuiInputCardGroup),
                        tuiAsControl(TuiInputCardGroup),
                        tuiDropdownOptionsProvider({ limitWidth: 'fixed' }),
                        TuiHoveredService,
                    ], hostDirectives: [
                        TuiAppearance,
                        TuiDropdownDirective,
                        TuiWithTextfieldDropdown,
                        TuiWithDropdownOpen,
                    ], host: {
                        'data-size': 'l',
                        '(mousedown)': 'onMouseDown($event)',
                        '(scroll.zoneless)': '$event.target.scrollLeft = 0',
                    }, template: "<div class=\"t-wrapper\">\n    <label\n        *tuiLet=\"value()?.card | tuiFormatCard: cardPrefilled as formattedCard\"\n        (click.zoneless.prevent)=\"(0)\"\n    >\n        <input\n            #inputCard\n            automation-id=\"tui-input-card-group__card\"\n            inputmode=\"numeric\"\n            translate=\"no\"\n            type=\"text\"\n            class=\"t-input t-input_card\"\n            [attr.aria-invalid]=\"!cardPrefilled && !(this.card | tuiMapper: cardValidator)\"\n            [attr.id]=\"id + '_card'\"\n            [autocomplete]=\"autocomplete ? 'cc-number' : 'off'\"\n            [class.t-input_filled]=\"card.length\"\n            [class.t-input_inert]=\"cardPrefilled\"\n            [disabled]=\"disabled()\"\n            [maskito]=\"maskCard\"\n            [ngModel]=\"formattedCard\"\n            [ngModelOptions]=\"{standalone: true}\"\n            [placeholder]=\"cardPrefilled ? '' : placeholder || exampleText\"\n            [readOnly]=\"readOnly()\"\n            [tabIndex]=\"cardFocusable ? 0 : -1\"\n            (focus)=\"(0)\"\n            (ngModelChange)=\"onCardChange($event)\"\n        />\n        <span\n            aria-hidden=\"true\"\n            translate=\"no\"\n            class=\"t-collapsed\"\n            [attr.data-before]=\"masked\"\n            [class.t-collapsed_enable-mask]=\"cardCollapsed\"\n            (waResizeObserver)=\"onResize()\"\n        >\n            <span\n                #ghost\n                class=\"t-ghost\"\n                [textContent]=\"formattedCard.slice(-tailLength)\"\n            ></span>\n\n            <span class=\"t-collapsed-wrapper\">\n                <span\n                    class=\"t-value\"\n                    [style.transform]=\"transform(ghost)\"\n                >\n                    {{ formattedCard }}\n                </span>\n            </span>\n        </span>\n        <div\n            class=\"t-label\"\n            [class.t-label_raised]=\"labelRaised()\"\n        >\n            {{ texts()?.cardNumberText }}\n        </div>\n    </label>\n</div>\n<div\n    class=\"t-wrapper t-wrapper_expire\"\n    [class.t-wrapper_active]=\"cardCollapsed\"\n>\n    <label (click.zoneless.prevent)=\"(0)\">\n        <input\n            #inputExpire\n            automation-id=\"tui-input-card-group__expire\"\n            inputmode=\"numeric\"\n            maxlength=\"5\"\n            translate=\"no\"\n            class=\"t-input\"\n            [attr.id]=\"id + '_expire'\"\n            [attr.name]=\"autocomplete ? 'ccexpiryyear' : null\"\n            [autocomplete]=\"autocomplete ? 'cc-exp' : 'off'\"\n            [class.t-input_inert]=\"!expireFocusable\"\n            [class.t-input_prefilled]=\"!inputs.expire\"\n            [disabled]=\"disabled()\"\n            [maskito]=\"maskExpire\"\n            [ngModel]=\"expire\"\n            [ngModelOptions]=\"{standalone: true}\"\n            [placeholder]=\"inputs.expire ? '00/00' : '\u2022\u2022/\u2022\u2022'\"\n            [readOnly]=\"readOnly() || !inputs.expire\"\n            [tabIndex]=\"expireFocusable ? 0 : -1\"\n            (focus)=\"(0)\"\n            (ngModelChange)=\"onExpireChange($event)\"\n        />\n        <div\n            class=\"t-label\"\n            [class.t-label_raised]=\"labelRaised()\"\n        >\n            {{ texts()?.expiryText }}\n        </div>\n    </label>\n</div>\n<div\n    class=\"t-wrapper t-wrapper_cvc\"\n    [class.t-wrapper_active]=\"cardCollapsed\"\n>\n    <label (click.zoneless.prevent)=\"(0)\">\n        <input\n            #inputCVC\n            automation-id=\"tui-input-card-group__cvc\"\n            inputmode=\"numeric\"\n            translate=\"no\"\n            type=\"text\"\n            class=\"t-input\"\n            [attr.id]=\"id + '_cvc'\"\n            [autocomplete]=\"autocomplete ? 'cc-csc' : 'off'\"\n            [class.t-input_cvc_hidden]=\"cvcHidden\"\n            [class.t-input_prefilled]=\"cvcPrefilled\"\n            [disabled]=\"disabled()\"\n            [maskito]=\"maskCVC\"\n            [ngModel]=\"cvc\"\n            [ngModelOptions]=\"{standalone: true}\"\n            [placeholder]=\"cvcPrefilled ? '\u2022\u2022\u2022' : exampleTextCVC\"\n            [readOnly]=\"readOnly() || cvcPrefilled\"\n            [tabIndex]=\"cvcFocusable ? 0 : -1\"\n            (focus)=\"(0)\"\n            (ngModelChange)=\"onCVCChange($event)\"\n        />\n        <div\n            class=\"t-label\"\n            [class.t-label_raised]=\"labelRaised()\"\n        >\n            {{ texts()?.cvcText }}\n        </div>\n    </label>\n</div>\n<div class=\"t-icons\">\n    <div\n        *ngIf=\"content\"\n        class=\"t-icon-outlet\"\n    >\n        <img\n            *polymorpheusOutlet=\"content as src\"\n            alt=\"\"\n            automation-id=\"tui-input-card-group__icon\"\n            class=\"t-card\"\n            [src]=\"src | tuiIcon\"\n        />\n    </div>\n    <tui-icon\n        *ngIf=\"hasCleaner()\"\n        automation-id=\"tui-input-card-group__cleaner\"\n        tuiAppearance=\"icon\"\n        class=\"t-icon\"\n        [icon]=\"icons.close\"\n        (click)=\"clear()\"\n    />\n    <tui-icon\n        *ngIf=\"dropdown.content\"\n        automation-id=\"tui-input-card-group__dropdown\"\n        tuiAppearance=\"icon\"\n        tuiChevron\n        (click)=\"toggle()\"\n    />\n</div>\n", styles: [":host{position:relative;display:block;block-size:var(--tui-height-l);inline-size:29.5rem;border-radius:var(--tui-radius-l);overflow:hidden}:host :host-context(tui-root._mobile){inline-size:18rem}:host[tuiAppearance][data-appearance]:has(:-webkit-autofill){background:var(--tui-service-autofill-background)!important}.t-outline{block-size:100%;inline-size:100%}.t-wrapper{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;inline-size:100%;block-size:100%}.t-wrapper_cvc{margin-left:7.1875rem;transform:translate3d(100%,0,0)}:host-context(tui-root._mobile) .t-wrapper_cvc{margin-left:4.0625rem}.t-wrapper_expire{transform:translate3d(100%,0,0)}.t-wrapper_active{transform:translate3d(6.5625rem,0,0)}:host-context(tui-root._mobile) .t-wrapper_active{transform:translate3d(4.125rem,0,0)}.t-card{inline-size:2rem;block-size:2rem}.t-collapsed{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;padding:1.25rem var(--tui-padding-l) 0;box-sizing:border-box;font:var(--tui-font-text-m);line-height:2.25rem;color:var(--tui-text-primary);white-space:nowrap;pointer-events:none}.t-collapsed_enable-mask:before{content:attr(data-before)}.t-collapsed_enable-mask .t-collapsed-wrapper{left:1.375rem}.t-collapsed-wrapper{position:absolute;top:0;display:block;inline-size:100%;block-size:100%;overflow:hidden}.t-value{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;bottom:0;right:100%;display:block;transform:translate3d(100%,0,0)}.t-input{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;border:0;margin:0;padding:1.25rem var(--tui-padding-l) 0;outline:none;background:transparent;box-sizing:border-box;font:var(--tui-font-text-m);color:var(--tui-text-primary)}.t-input::placeholder{color:var(--tui-text-tertiary)}.t-input_prefilled::placeholder{color:var(--tui-text-primary)}.t-input[chrome-autofilled],.t-input:-webkit-autofill{-webkit-text-fill-color:var(--tui-text-primary)!important;caret-color:var(--tui-text-primary)!important;-webkit-transition:background-color 600000s 0s;transition:background-color 600000s 0s}.t-input.t-input.t-input_card:not(:-webkit-autofill):not(:focus:placeholder-shown),.t-input.t-input.t-input_card.t-input_filled{caret-color:var(--tui-text-primary);color:transparent!important;-webkit-text-fill-color:transparent!important}.t-input.t-input.t-input_card::-webkit-credit-card-auto-fill-button{content:none!important;position:absolute;left:-62.4375rem;top:-62.4375rem;z-index:-999;display:none!important;background:transparent!important;pointer-events:none!important}.t-input_inert{pointer-events:none}.t-input_cvc_hidden{-webkit-text-security:disc}.t-icons{position:absolute;right:.75rem;display:flex;align-items:center;block-size:100%}.t-icon-outlet{display:flex;margin-right:.25rem}.t-icon{cursor:pointer;border-width:.25rem}.t-label{transition-property:all;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;position:relative;margin:1.125rem 1rem;font:var(--tui-font-text-m);line-height:1.25rem;color:var(--tui-text-secondary)}input:-webkit-autofill~.t-label,.t-label_raised{font-size:.8156rem;transform:translateY(-.7em)}:host([data-mode~=\"invalid\"]) .t-label{color:var(--tui-text-negative)}:host([data-focus=\"true\"]) .t-label{color:var(--tui-text-primary)}.t-ghost{visibility:hidden}\n"] }]
        }], propDecorators: { inputCard: [{
                type: ViewChild,
                args: ['inputCard']
            }], inputExpire: [{
                type: ViewChild,
                args: ['inputExpire']
            }], inputCVC: [{
                type: ViewChild,
                args: ['inputCVC']
            }], exampleText: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], inputs: [{
                type: Input
            }], cardValidator: [{
                type: Input
            }], icon: [{
                type: Input
            }], id: [{
                type: Input
            }], autocomplete: [{
                type: Input
            }], binChange: [{
                type: Output
            }], codeLength: [{
                type: Input
            }], isFocusable: [], getPaymentSystem: [] } });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_INPUT_CARD_GROUP_DEFAULT_OPTIONS, TUI_INPUT_CARD_GROUP_OPTIONS, TUI_INPUT_CARD_GROUP_TEXTS, TuiInputCardGroup, tuiInputCardGroupOptionsProvider };
//# sourceMappingURL=taiga-ui-addon-commerce-components-input-card-group.mjs.map
