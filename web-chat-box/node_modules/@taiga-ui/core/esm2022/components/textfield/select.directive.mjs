import { CommonModule, DOCUMENT } from '@angular/common';
import { ChangeDetectionStrategy, Component, inject, Input } from '@angular/core';
import { WA_NAVIGATOR } from '@ng-web-apis/common';
import { TuiNativeValidator } from '@taiga-ui/cdk/directives/native-validator';
import { tuiProvide } from '@taiga-ui/cdk/utils/miscellaneous';
import { TuiAppearance } from '@taiga-ui/core/directives/appearance';
import { TuiTextfieldBase, TuiTextfieldDirective } from './textfield.directive';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk/directives/native-validator";
import * as i2 from "@taiga-ui/core/directives/appearance";
import * as i3 from "@angular/common";
class TuiSelect extends TuiTextfieldBase {
    constructor() {
        super(...arguments);
        this.nav = inject(WA_NAVIGATOR);
        this.doc = inject(DOCUMENT);
        this.placeholder = '';
    }
    setValue(value) {
        this.control?.control?.setValue(value);
        this.el.dispatchEvent(new Event('input', { bubbles: true }));
    }
    focus() {
        this.el.classList.add('_ios-fix');
        this.el.focus();
        this.el.classList.remove('_ios-fix');
    }
    get ariaLabel() {
        return this.doc.querySelector(`label[for="${this.el.id}"]`)
            ? null
            : this.el.getAttribute('aria-label') || this.placeholder;
    }
    get stringified() {
        return this.textfield.stringify(this.control?.value ?? '');
    }
    async onCopy() {
        await this.nav.clipboard.writeText(this.stringified);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSelect, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiSelect, isStandalone: true, selector: "select[tuiTextfield]", inputs: { placeholder: "placeholder" }, host: { listeners: { "input": "0", "focusin": "0", "focusout": "0", "keydown.space.prevent": "0", "keydown.enter.prevent": "0", "keydown.backspace": "setValue(\"\")", "mousedown.prevent": "focus()", "keydown.control.c": "onCopy()", "keydown.meta.c": "onCopy()" }, properties: { "id": "textfield.id", "class._empty": "stringified === \"\"", "attr.aria-label": "ariaLabel" } }, providers: [tuiProvide(TuiTextfieldDirective, TuiSelect)], usesInheritance: true, hostDirectives: [{ directive: i1.TuiNativeValidator }, { directive: i2.TuiAppearance }], ngImport: i0, template: "<option\n    *ngIf=\"placeholder && !stringified; else selected\"\n    disabled\n    selected\n    value=\"\"\n>\n    {{ placeholder }}\n</option>\n<ng-template #selected>\n    <option\n        *ngFor=\"let item of [stringified]\"\n        selected\n        [value]=\"item\"\n    >\n        {{ item }}\n    </option>\n</ng-template>\n", dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.Default }); }
}
export { TuiSelect };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSelect, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'select[tuiTextfield]', imports: [CommonModule], changeDetection: ChangeDetectionStrategy.Default, providers: [tuiProvide(TuiTextfieldDirective, TuiSelect)], hostDirectives: [TuiNativeValidator, TuiAppearance], host: {
                        '[id]': 'textfield.id',
                        '[class._empty]': 'stringified === ""',
                        '[attr.aria-label]': 'ariaLabel',
                        '(input)': '0',
                        '(focusin)': '0',
                        '(focusout)': '0',
                        '(keydown.space.prevent)': '0',
                        '(keydown.enter.prevent)': '0',
                        '(keydown.backspace)': 'setValue("")',
                        '(mousedown.prevent)': 'focus()',
                        '(keydown.control.c)': 'onCopy()',
                        '(keydown.meta.c)': 'onCopy()',
                    }, template: "<option\n    *ngIf=\"placeholder && !stringified; else selected\"\n    disabled\n    selected\n    value=\"\"\n>\n    {{ placeholder }}\n</option>\n<ng-template #selected>\n    <option\n        *ngFor=\"let item of [stringified]\"\n        selected\n        [value]=\"item\"\n    >\n        {{ item }}\n    </option>\n</ng-template>\n" }]
        }], propDecorators: { placeholder: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy90ZXh0ZmllbGQvc2VsZWN0LmRpcmVjdGl2ZS50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy90ZXh0ZmllbGQvc2VsZWN0LnRlbXBsYXRlLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFlBQVksRUFBRSxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN2RCxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDaEYsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLDJDQUEyQyxDQUFDO0FBQzdFLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUM3RCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sc0NBQXNDLENBQUM7QUFFbkUsT0FBTyxFQUFDLGdCQUFnQixFQUFFLHFCQUFxQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7Ozs7O0FBRTlFLE1BeUJhLFNBQWEsU0FBUSxnQkFBbUI7SUF6QnJEOztRQTBCcUIsUUFBRyxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMzQixRQUFHLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBR2pDLGdCQUFXLEdBQUcsRUFBRSxDQUFDO0tBMEIzQjtJQXhCbUIsUUFBUSxDQUFDLEtBQVE7UUFDN0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVNLEtBQUs7UUFDUixJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELElBQWMsU0FBUztRQUNuQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGNBQWMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQztZQUN2RCxDQUFDLENBQUMsSUFBSTtZQUNOLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQ2pFLENBQUM7SUFFRCxJQUFjLFdBQVc7UUFDckIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRVMsS0FBSyxDQUFDLE1BQU07UUFDbEIsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3pELENBQUM7K0dBOUJRLFNBQVM7bUdBQVQsU0FBUyxtZUFqQlAsQ0FBQyxVQUFVLENBQUMscUJBQXFCLEVBQUUsU0FBUyxDQUFDLENBQUMsMElDakI3RCxnVkFpQkEsMkNETGMsWUFBWTs7U0FzQmIsU0FBUzs0RkFBVCxTQUFTO2tCQXpCckIsU0FBUztpQ0FDTSxJQUFJLFlBQ04sc0JBQXNCLFdBQ3ZCLENBQUMsWUFBWSxDQUFDLG1CQUlOLHVCQUF1QixDQUFDLE9BQU8sYUFDckMsQ0FBQyxVQUFVLENBQUMscUJBQXFCLFlBQVksQ0FBQyxrQkFDekMsQ0FBQyxrQkFBa0IsRUFBRSxhQUFhLENBQUMsUUFDN0M7d0JBQ0YsTUFBTSxFQUFFLGNBQWM7d0JBQ3RCLGdCQUFnQixFQUFFLG9CQUFvQjt3QkFDdEMsbUJBQW1CLEVBQUUsV0FBVzt3QkFDaEMsU0FBUyxFQUFFLEdBQUc7d0JBQ2QsV0FBVyxFQUFFLEdBQUc7d0JBQ2hCLFlBQVksRUFBRSxHQUFHO3dCQUNqQix5QkFBeUIsRUFBRSxHQUFHO3dCQUM5Qix5QkFBeUIsRUFBRSxHQUFHO3dCQUM5QixxQkFBcUIsRUFBRSxjQUFjO3dCQUNyQyxxQkFBcUIsRUFBRSxTQUFTO3dCQUNoQyxxQkFBcUIsRUFBRSxVQUFVO3dCQUNqQyxrQkFBa0IsRUFBRSxVQUFVO3FCQUNqQzs4QkFPTSxXQUFXO3NCQURqQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21tb25Nb2R1bGUsIERPQ1VNRU5UfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBpbmplY3QsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7V0FfTkFWSUdBVE9SfSBmcm9tICdAbmctd2ViLWFwaXMvY29tbW9uJztcbmltcG9ydCB7VHVpTmF0aXZlVmFsaWRhdG9yfSBmcm9tICdAdGFpZ2EtdWkvY2RrL2RpcmVjdGl2ZXMvbmF0aXZlLXZhbGlkYXRvcic7XG5pbXBvcnQge3R1aVByb3ZpZGV9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvbWlzY2VsbGFuZW91cyc7XG5pbXBvcnQge1R1aUFwcGVhcmFuY2V9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2RpcmVjdGl2ZXMvYXBwZWFyYW5jZSc7XG5cbmltcG9ydCB7VHVpVGV4dGZpZWxkQmFzZSwgVHVpVGV4dGZpZWxkRGlyZWN0aXZlfSBmcm9tICcuL3RleHRmaWVsZC5kaXJlY3RpdmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzdGFuZGFsb25lOiB0cnVlLFxuICAgIHNlbGVjdG9yOiAnc2VsZWN0W3R1aVRleHRmaWVsZF0nLFxuICAgIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9zZWxlY3QudGVtcGxhdGUuaHRtbCcsXG4gICAgLy8gV2Ugd2FudCB0aGlzIHRlbXBsYXRlIHRvIGZvbGxvdyBjaGFuZ2UgZGV0ZWN0aW9uIHRvIHBhcmVudCB0ZXh0ZmllbGQuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9wcmVmZXItb24tcHVzaC1jb21wb25lbnQtY2hhbmdlLWRldGVjdGlvblxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuRGVmYXVsdCxcbiAgICBwcm92aWRlcnM6IFt0dWlQcm92aWRlKFR1aVRleHRmaWVsZERpcmVjdGl2ZSwgVHVpU2VsZWN0KV0sXG4gICAgaG9zdERpcmVjdGl2ZXM6IFtUdWlOYXRpdmVWYWxpZGF0b3IsIFR1aUFwcGVhcmFuY2VdLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJ1tpZF0nOiAndGV4dGZpZWxkLmlkJyxcbiAgICAgICAgJ1tjbGFzcy5fZW1wdHldJzogJ3N0cmluZ2lmaWVkID09PSBcIlwiJyxcbiAgICAgICAgJ1thdHRyLmFyaWEtbGFiZWxdJzogJ2FyaWFMYWJlbCcsXG4gICAgICAgICcoaW5wdXQpJzogJzAnLFxuICAgICAgICAnKGZvY3VzaW4pJzogJzAnLFxuICAgICAgICAnKGZvY3Vzb3V0KSc6ICcwJyxcbiAgICAgICAgJyhrZXlkb3duLnNwYWNlLnByZXZlbnQpJzogJzAnLFxuICAgICAgICAnKGtleWRvd24uZW50ZXIucHJldmVudCknOiAnMCcsXG4gICAgICAgICcoa2V5ZG93bi5iYWNrc3BhY2UpJzogJ3NldFZhbHVlKFwiXCIpJyxcbiAgICAgICAgJyhtb3VzZWRvd24ucHJldmVudCknOiAnZm9jdXMoKScsXG4gICAgICAgICcoa2V5ZG93bi5jb250cm9sLmMpJzogJ29uQ29weSgpJyxcbiAgICAgICAgJyhrZXlkb3duLm1ldGEuYyknOiAnb25Db3B5KCknLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aVNlbGVjdDxUPiBleHRlbmRzIFR1aVRleHRmaWVsZEJhc2U8VD4ge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgbmF2ID0gaW5qZWN0KFdBX05BVklHQVRPUik7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkb2MgPSBpbmplY3QoRE9DVU1FTlQpO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgcGxhY2Vob2xkZXIgPSAnJztcblxuICAgIHB1YmxpYyBvdmVycmlkZSBzZXRWYWx1ZSh2YWx1ZTogVCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNvbnRyb2w/LmNvbnRyb2w/LnNldFZhbHVlKHZhbHVlKTtcbiAgICAgICAgdGhpcy5lbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnaW5wdXQnLCB7YnViYmxlczogdHJ1ZX0pKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZm9jdXMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZCgnX2lvcy1maXgnKTtcbiAgICAgICAgdGhpcy5lbC5mb2N1cygpO1xuICAgICAgICB0aGlzLmVsLmNsYXNzTGlzdC5yZW1vdmUoJ19pb3MtZml4Jyk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBhcmlhTGFiZWwoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvYy5xdWVyeVNlbGVjdG9yKGBsYWJlbFtmb3I9XCIke3RoaXMuZWwuaWR9XCJdYClcbiAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgOiB0aGlzLmVsLmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpIHx8IHRoaXMucGxhY2Vob2xkZXI7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBzdHJpbmdpZmllZCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0ZmllbGQuc3RyaW5naWZ5KHRoaXMuY29udHJvbD8udmFsdWUgPz8gJycpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBhc3luYyBvbkNvcHkoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMubmF2LmNsaXBib2FyZC53cml0ZVRleHQodGhpcy5zdHJpbmdpZmllZCk7XG4gICAgfVxufVxuIiwiPG9wdGlvblxuICAgICpuZ0lmPVwicGxhY2Vob2xkZXIgJiYgIXN0cmluZ2lmaWVkOyBlbHNlIHNlbGVjdGVkXCJcbiAgICBkaXNhYmxlZFxuICAgIHNlbGVjdGVkXG4gICAgdmFsdWU9XCJcIlxuPlxuICAgIHt7IHBsYWNlaG9sZGVyIH19XG48L29wdGlvbj5cbjxuZy10ZW1wbGF0ZSAjc2VsZWN0ZWQ+XG4gICAgPG9wdGlvblxuICAgICAgICAqbmdGb3I9XCJsZXQgaXRlbSBvZiBbc3RyaW5naWZpZWRdXCJcbiAgICAgICAgc2VsZWN0ZWRcbiAgICAgICAgW3ZhbHVlXT1cIml0ZW1cIlxuICAgID5cbiAgICAgICAge3sgaXRlbSB9fVxuICAgIDwvb3B0aW9uPlxuPC9uZy10ZW1wbGF0ZT5cbiJdfQ==