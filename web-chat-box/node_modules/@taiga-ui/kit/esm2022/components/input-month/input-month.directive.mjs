import { computed, Directive, effect, inject } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { tuiAsControl, TuiControl } from '@taiga-ui/cdk/classes';
import { TUI_ALLOW_SIGNAL_WRITES } from '@taiga-ui/cdk/constants';
import { TUI_IS_MOBILE } from '@taiga-ui/cdk/tokens';
import { tuiInjectElement, tuiValueBinding } from '@taiga-ui/cdk/utils/dom';
import { tuiDirectiveBinding } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_TEXTFIELD_OPTIONS, tuiInjectAuxiliary, TuiWithTextfield, } from '@taiga-ui/core/components/textfield';
import { TUI_DROPDOWN_OPTIONS, tuiDropdownOpen } from '@taiga-ui/core/directives/dropdown';
import { TuiIcons } from '@taiga-ui/core/directives/icons';
import { TuiCalendarMonth } from '@taiga-ui/kit/components/calendar-month';
import { TUI_MONTH_FORMATTER } from '@taiga-ui/kit/tokens';
import { TUI_INPUT_MONTH_OPTIONS } from './input-month.options';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/components/textfield";
class TuiInputMonthDirective extends TuiControl {
    constructor() {
        super();
        this.options = inject(TUI_INPUT_MONTH_OPTIONS);
        this.textfieldOptions = inject(TUI_TEXTFIELD_OPTIONS);
        this.open = tuiDropdownOpen();
        this.formatter = toSignal(inject(TUI_MONTH_FORMATTER), {
            initialValue: () => '',
        });
        this.textfieldValue = tuiValueBinding(computed(() => this.formatter()(this.value())));
        this.icon = tuiDirectiveBinding(TuiIcons, 'iconEnd', computed(() => this.options.icon(this.textfieldOptions.size())), {});
        this.calendarSync = effect(() => {
            this.calendar()?.value.set(this.value());
        }, TUI_ALLOW_SIGNAL_WRITES);
        this.onMonthClickEffect = effect((onCleanup) => {
            const subscription = this.calendar()?.monthClick.subscribe((month) => {
                this.onChange(month);
                this.open.set(false);
            });
            onCleanup(() => subscription?.unsubscribe());
        });
        this.calendar = tuiInjectAuxiliary((x) => x instanceof TuiCalendarMonth);
        this.nativePickerEnabled = tuiInjectElement().type === 'month' && inject(TUI_IS_MOBILE);
        /**
         * Update directive props with new defaults before inputs are processed
         * TODO: find better way to override TuiDropdownFixed host directive from TuiTextfieldComponent
         */
        inject(TUI_DROPDOWN_OPTIONS).limitWidth = 'auto';
    }
    setDisabledState() {
        super.setDisabledState();
        this.open.set(false);
    }
    toggleDropdown() {
        if (this.interactive() && !this.nativePickerEnabled) {
            this.open.update((x) => !x);
        }
    }
    clear() {
        this.onChange(null);
        if (!this.nativePickerEnabled) {
            this.open.set(true);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputMonthDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputMonthDirective, isStandalone: true, selector: "input[tuiInputMonth]", host: { attributes: { "inputmode": "none" }, listeners: { "click": "toggleDropdown()", "blur": "onTouched()", "beforeinput": "$event.inputType.includes(\"delete\") || $event.preventDefault()", "input": "$event.inputType?.includes(\"delete\") && clear()" }, properties: { "disabled": "disabled()" } }, providers: [tuiAsControl(TuiInputMonthDirective)], usesInheritance: true, hostDirectives: [{ directive: i1.TuiWithTextfield }], ngImport: i0 }); }
}
export { TuiInputMonthDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputMonthDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'input[tuiInputMonth]',
                    providers: [tuiAsControl(TuiInputMonthDirective)],
                    hostDirectives: [TuiWithTextfield],
                    host: {
                        inputmode: 'none',
                        '[disabled]': 'disabled()',
                        '(click)': 'toggleDropdown()',
                        '(blur)': 'onTouched()',
                        '(beforeinput)': '$event.inputType.includes("delete") || $event.preventDefault()',
                        '(input)': '$event.inputType?.includes("delete") && clear()',
                    },
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,