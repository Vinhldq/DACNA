import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, inject, Input, Output, TemplateRef, ViewChild, } from '@angular/core';
import { EMPTY_QUERY } from '@taiga-ui/cdk/constants';
import { TuiItem } from '@taiga-ui/cdk/directives/item';
import { tuiInjectElement, tuiIsElement } from '@taiga-ui/cdk/utils/dom';
import { tuiGetClosestFocusable, tuiIsNativeFocused } from '@taiga-ui/cdk/utils/focus';
import { tuiClamp, tuiToInt } from '@taiga-ui/cdk/utils/math';
import { tuiPx } from '@taiga-ui/cdk/utils/miscellaneous';
import { TuiDropdown } from '@taiga-ui/core/directives/dropdown';
import { TuiChevron } from '@taiga-ui/kit/directives';
import { TUI_MORE_WORD } from '@taiga-ui/kit/tokens';
import { PolymorpheusOutlet } from '@taiga-ui/polymorpheus';
import { filter, map, tap } from 'rxjs';
import { TuiTab } from './tab.directive';
import { TUI_TABS_OPTIONS } from './tabs.options';
import { TUI_TABS_PROVIDERS, TUI_TABS_REFRESH } from './tabs.providers';
import { TuiTabsHorizontal } from './tabs-horizontal.directive';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@taiga-ui/core/directives/dropdown";
class TuiTabsWithMore {
    constructor() {
        this.options = inject(TUI_TABS_OPTIONS);
        this.refresh$ = inject(TUI_TABS_REFRESH);
        this.el = tuiInjectElement();
        this.cdr = inject(ChangeDetectorRef);
        this.maxIndex = Infinity;
        this.items = EMPTY_QUERY;
        this.moreWord$ = inject(TUI_MORE_WORD);
        this.open = false;
        this.size = this.options.size;
        this.underline = this.options.underline;
        this.itemsLimit = this.options.itemsLimit;
        this.activeItemIndexChange = new EventEmitter();
        this.activeItemIndex = 0;
    }
    set itemIndex(activeItemIndex) {
        this.activeItemIndex = activeItemIndex;
        this.maxIndex = this.getMaxIndex();
    }
    get lastVisibleIndex() {
        if (this.itemsLimit + 1 >= this.items.length) {
            return this.maxIndex;
        }
        const offset = this.itemsLimit - 1 > this.activeItemIndex || !this.options.exposeActive
            ? 1
            : 2;
        return Math.min(this.itemsLimit - offset, this.maxIndex);
    }
    ngAfterViewInit() {
        this.refresh$
            .pipe(map(() => this.getMaxIndex()), tap(() => this.refresh()), filter((maxIndex) => this.maxIndex !== maxIndex))
            .subscribe((maxIndex) => {
            this.maxIndex = maxIndex;
            this.cdr.detectChanges();
        });
    }
    ngAfterViewChecked() {
        this.refresh();
    }
    // TODO: Improve performance
    get tabs() {
        return Array.from(this.el.querySelectorAll('[tuiTab]'));
    }
    get activeElement() {
        const { tabs } = this;
        const safeActiveIndex = tuiClamp(this.activeItemIndex || 0, 0, tabs.length - 2);
        return this.options.exposeActive || this.lastVisibleIndex >= safeActiveIndex
            ? tabs[safeActiveIndex] || null
            : this.moreButton?.nativeElement || null;
    }
    get isMoreAlone() {
        return this.lastVisibleIndex < 0 && !this.options.exposeActive;
    }
    get isMoreVisible() {
        return this.lastVisibleIndex < this.items.length - 1;
    }
    get isMoreFocusable() {
        return !!this.moreButton && tuiIsNativeFocused(this.moreButton.nativeElement);
    }
    get isMoreActive() {
        return (this.open ||
            (!this.options.exposeActive && this.lastVisibleIndex < this.activeItemIndex));
    }
    onActiveItemIndexChange(activeItemIndex) {
        this.updateActiveItemIndex(activeItemIndex);
    }
    onClick(index) {
        this.open = false;
        this.focusMore();
        this.updateActiveItemIndex(index);
    }
    onArrowRight(event) {
        if (tuiIsElement(event.target) && tuiIsNativeFocused(event.target)) {
            this.focusMore();
        }
    }
    onArrowLeft() {
        const { tabs } = this;
        let index = tabs.length - 2;
        while (index >= 0) {
            tabs[index]?.focus();
            if (tuiIsNativeFocused(tabs[index])) {
                return;
            }
            index--;
        }
    }
    onWrapperArrow(event, wrapper, previous) {
        const button = event.target;
        const target = tuiGetClosestFocusable({ initial: button, root: wrapper, previous });
        if (target) {
            target.focus();
        }
    }
    isOverflown(index) {
        return index !== this.activeItemIndex || !this.options.exposeActive;
    }
    shouldShow(index) {
        return index > this.lastVisibleIndex && this.isOverflown(index);
    }
    get margin() {
        return this.size === 'l' ? 24 : 16;
    }
    focusMore() {
        if (this.moreButton) {
            this.moreButton.nativeElement.focus();
        }
    }
    getMaxIndex() {
        const { tabs, activeItemIndex, margin } = this;
        if (tabs.length < 2) {
            return 0;
        }
        const { exposeActive, minMoreWidth } = this.options;
        const { clientWidth } = this.el;
        const active = tabs[activeItemIndex];
        const activeWidth = active?.scrollWidth ?? 0;
        const moreWidth = Math.max(tabs[tabs.length - 1]?.scrollWidth ?? 0, minMoreWidth);
        let maxIndex = tabs.length - 2;
        let total = tabs.reduce((acc, { scrollWidth }) => acc + scrollWidth, 0) +
            maxIndex * margin -
            (tabs[tabs.length - 1]?.scrollWidth ?? 0);
        if (Number.isNaN(total) || total <= clientWidth) {
            return Infinity;
        }
        while (maxIndex) {
            total -= (tabs[maxIndex]?.scrollWidth ?? 0) + margin;
            maxIndex--;
            const activeDisplaced = exposeActive && activeItemIndex > maxIndex;
            const activeOffset = activeDisplaced ? activeWidth + margin : 0;
            const currentWidth = total + activeOffset + moreWidth + margin;
            // Needed for different rounding of visible and hidden elements scrollWidth
            const safetyOffset = tuiToInt(this.maxIndex === maxIndex - 1);
            if (currentWidth + safetyOffset < clientWidth) {
                return maxIndex;
            }
        }
        return -1;
    }
    updateActiveItemIndex(activeItemIndex) {
        this.itemIndex = activeItemIndex;
        this.activeItemIndexChange.emit(activeItemIndex);
    }
    refresh() {
        const { offsetLeft = 0, offsetWidth = 0 } = this.activeElement || {};
        this.dir?.nativeElement.style.setProperty('--t-left', tuiPx(offsetLeft));
        this.dir?.nativeElement.style.setProperty('--t-width', tuiPx(offsetWidth));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTabsWithMore, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiTabsWithMore, isStandalone: true, selector: "tui-tabs-with-more, nav[tuiTabsWithMore]", inputs: { size: "size", moreContent: "moreContent", dropdownContent: "dropdownContent", underline: "underline", itemsLimit: "itemsLimit", itemIndex: ["activeItemIndex", "itemIndex"] }, outputs: { activeItemIndexChange: "activeItemIndexChange" }, host: { properties: { "attr.data-size": "size" } }, providers: TUI_TABS_PROVIDERS, queries: [{ propertyName: "items", predicate: TuiItem, read: TemplateRef }], viewQueries: [{ propertyName: "moreButton", first: true, predicate: TuiTab, descendants: true, read: ElementRef }, { propertyName: "dir", first: true, predicate: TuiTabsHorizontal, descendants: true, read: ElementRef }], ngImport: i0, template: "<ng-container *ngIf=\"items.changes | async\" />\n<tui-tabs\n    class=\"t-tabs\"\n    [activeItemIndex]=\"activeItemIndex\"\n    [size]=\"size\"\n    [underline]=\"underline\"\n    (activeItemIndexChange)=\"onActiveItemIndexChange($event)\"\n    (keydown.arrowRight)=\"onArrowRight($event)\"\n>\n    <ng-container *ngFor=\"let item of items; let index = index\">\n        <ng-container\n            *ngIf=\"index <= lastVisibleIndex; else hidden\"\n            [ngTemplateOutlet]=\"item\"\n        />\n        <ng-template #hidden>\n            <div\n                class=\"t-flex\"\n                [class.t-overflown]=\"isOverflown(index)\"\n            >\n                <ng-container [ngTemplateOutlet]=\"item\" />\n            </div>\n        </ng-template>\n    </ng-container>\n</tui-tabs>\n\n<button\n    *ngIf=\"moreContent; else chevron\"\n    tuiTab\n    type=\"button\"\n    class=\"t-more\"\n    [class._active]=\"isMoreActive\"\n    [class.t-no-margin]=\"isMoreAlone\"\n    [class.t-overflown]=\"!isMoreVisible\"\n    [tabIndex]=\"isMoreFocusable ? 0 : -1\"\n    [tuiDropdown]=\"dropdownContent || dropdown\"\n    [(tuiDropdownOpen)]=\"open\"\n    (keydown.arrowLeft.prevent)=\"onArrowLeft()\"\n>\n    <ng-container *polymorpheusOutlet=\"moreContent as text\">\n        {{ text }}\n    </ng-container>\n</button>\n<ng-template #chevron>\n    <button\n        tuiChevron\n        tuiTab\n        type=\"button\"\n        class=\"t-more\"\n        [class._active]=\"isMoreActive\"\n        [class.t-no-margin]=\"isMoreAlone\"\n        [class.t-overflown]=\"!isMoreVisible\"\n        [tabIndex]=\"isMoreFocusable ? 0 : -1\"\n        [tuiDropdown]=\"dropdownContent || dropdown\"\n        [(tuiDropdownOpen)]=\"open\"\n        (keydown.arrowLeft.prevent)=\"onArrowLeft()\"\n    >\n        {{ moreWord$ | async }}\n    </button>\n</ng-template>\n<ng-template #dropdown>\n    <div\n        #element\n        class=\"t-dropdown\"\n        [attr.data-size]=\"size\"\n        (keydown.arrowDown.prevent)=\"onWrapperArrow($event, element, false)\"\n        (keydown.arrowUp.prevent)=\"onWrapperArrow($event, element, true)\"\n    >\n        <div\n            *ngFor=\"let item of items; let index = index\"\n            class=\"t-dropdown-item\"\n            (tui-tab-activate)=\"onClick(index)\"\n        >\n            <ng-container *ngIf=\"shouldShow(index)\">\n                <ng-container *polymorpheusOutlet=\"item\" />\n            </ng-container>\n        </div>\n    </div>\n</ng-template>\n", styles: [":host{position:relative;display:flex;font:var(--tui-font-text-m);box-sizing:border-box;color:var(--tui-text-secondary);box-shadow:inset 0 -1px var(--tui-border-normal);overflow:hidden}:host[data-size=m]{font:var(--tui-font-text-s)}.t-tabs{block-size:inherit;font:inherit;overflow:visible;box-shadow:none;color:inherit}.t-flex{display:flex}.t-overflown{margin:0;inline-size:0;max-inline-size:0;overflow:hidden;visibility:hidden}.t-icon{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;margin-right:-.25rem;vertical-align:bottom}.t-icon_rotated{transform:rotate(180deg)}.t-dropdown{padding:.25rem 0}.t-dropdown ::ng-deep *[tuiTab]{inline-size:calc(100% - .75rem);block-size:2.75rem;justify-content:flex-start;margin:.125rem .375rem;padding:0 .625rem;line-height:1.5rem;border-radius:var(--tui-radius-s);font:var(--tui-font-text-m);color:var(--tui-text-primary)}.t-dropdown ::ng-deep *[tuiTab]:before{display:none}.t-dropdown ::ng-deep *[tuiTab]:hover,.t-dropdown ::ng-deep *[tuiTab]:focus,.t-dropdown ::ng-deep *[tuiTab]._active{box-shadow:none;outline:none;background:var(--tui-background-neutral-1)}.t-dropdown[data-size=m] ::ng-deep *[tuiTab]{block-size:2.25rem;font:var(--tui-font-text-s)}.t-dropdown-item{display:flex;flex-direction:column}.t-no-margin{margin-left:0}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "directive", type: PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "directive", type: TuiChevron, selector: "[tuiChevron]", inputs: ["tuiChevron"] }, { kind: "directive", type: i2.TuiDropdownDirective, selector: "[tuiDropdown]:not(ng-container):not(ng-template)", inputs: ["tuiDropdown"], exportAs: ["tuiDropdown"] }, { kind: "directive", type: i2.TuiDropdownOpen, selector: "[tuiDropdown][tuiDropdownOpen],[tuiDropdown][tuiDropdownOpenChange]", inputs: ["tuiDropdownEnabled", "tuiDropdownOpen"], outputs: ["tuiDropdownOpenChange"] }, { kind: "directive", type: TuiTab, selector: "a[tuiTab]:not([routerLink]), a[tuiTab][routerLink][routerLinkActive], button[tuiTab]" }, { kind: "directive", type: TuiTabsHorizontal, selector: "tui-tabs:not([vertical]), nav[tuiTabs]:not([vertical])", inputs: ["underline"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiTabsWithMore };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTabsWithMore, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'tui-tabs-with-more, nav[tuiTabsWithMore]', imports: [
                        CommonModule,
                        PolymorpheusOutlet,
                        TuiChevron,
                        TuiDropdown,
                        TuiTab,
                        TuiTabsHorizontal,
                    ], changeDetection: ChangeDetectionStrategy.OnPush, providers: TUI_TABS_PROVIDERS, host: {
                        '[attr.data-size]': 'size',
                    }, template: "<ng-container *ngIf=\"items.changes | async\" />\n<tui-tabs\n    class=\"t-tabs\"\n    [activeItemIndex]=\"activeItemIndex\"\n    [size]=\"size\"\n    [underline]=\"underline\"\n    (activeItemIndexChange)=\"onActiveItemIndexChange($event)\"\n    (keydown.arrowRight)=\"onArrowRight($event)\"\n>\n    <ng-container *ngFor=\"let item of items; let index = index\">\n        <ng-container\n            *ngIf=\"index <= lastVisibleIndex; else hidden\"\n            [ngTemplateOutlet]=\"item\"\n        />\n        <ng-template #hidden>\n            <div\n                class=\"t-flex\"\n                [class.t-overflown]=\"isOverflown(index)\"\n            >\n                <ng-container [ngTemplateOutlet]=\"item\" />\n            </div>\n        </ng-template>\n    </ng-container>\n</tui-tabs>\n\n<button\n    *ngIf=\"moreContent; else chevron\"\n    tuiTab\n    type=\"button\"\n    class=\"t-more\"\n    [class._active]=\"isMoreActive\"\n    [class.t-no-margin]=\"isMoreAlone\"\n    [class.t-overflown]=\"!isMoreVisible\"\n    [tabIndex]=\"isMoreFocusable ? 0 : -1\"\n    [tuiDropdown]=\"dropdownContent || dropdown\"\n    [(tuiDropdownOpen)]=\"open\"\n    (keydown.arrowLeft.prevent)=\"onArrowLeft()\"\n>\n    <ng-container *polymorpheusOutlet=\"moreContent as text\">\n        {{ text }}\n    </ng-container>\n</button>\n<ng-template #chevron>\n    <button\n        tuiChevron\n        tuiTab\n        type=\"button\"\n        class=\"t-more\"\n        [class._active]=\"isMoreActive\"\n        [class.t-no-margin]=\"isMoreAlone\"\n        [class.t-overflown]=\"!isMoreVisible\"\n        [tabIndex]=\"isMoreFocusable ? 0 : -1\"\n        [tuiDropdown]=\"dropdownContent || dropdown\"\n        [(tuiDropdownOpen)]=\"open\"\n        (keydown.arrowLeft.prevent)=\"onArrowLeft()\"\n    >\n        {{ moreWord$ | async }}\n    </button>\n</ng-template>\n<ng-template #dropdown>\n    <div\n        #element\n        class=\"t-dropdown\"\n        [attr.data-size]=\"size\"\n        (keydown.arrowDown.prevent)=\"onWrapperArrow($event, element, false)\"\n        (keydown.arrowUp.prevent)=\"onWrapperArrow($event, element, true)\"\n    >\n        <div\n            *ngFor=\"let item of items; let index = index\"\n            class=\"t-dropdown-item\"\n            (tui-tab-activate)=\"onClick(index)\"\n        >\n            <ng-container *ngIf=\"shouldShow(index)\">\n                <ng-container *polymorpheusOutlet=\"item\" />\n            </ng-container>\n        </div>\n    </div>\n</ng-template>\n", styles: [":host{position:relative;display:flex;font:var(--tui-font-text-m);box-sizing:border-box;color:var(--tui-text-secondary);box-shadow:inset 0 -1px var(--tui-border-normal);overflow:hidden}:host[data-size=m]{font:var(--tui-font-text-s)}.t-tabs{block-size:inherit;font:inherit;overflow:visible;box-shadow:none;color:inherit}.t-flex{display:flex}.t-overflown{margin:0;inline-size:0;max-inline-size:0;overflow:hidden;visibility:hidden}.t-icon{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;margin-right:-.25rem;vertical-align:bottom}.t-icon_rotated{transform:rotate(180deg)}.t-dropdown{padding:.25rem 0}.t-dropdown ::ng-deep *[tuiTab]{inline-size:calc(100% - .75rem);block-size:2.75rem;justify-content:flex-start;margin:.125rem .375rem;padding:0 .625rem;line-height:1.5rem;border-radius:var(--tui-radius-s);font:var(--tui-font-text-m);color:var(--tui-text-primary)}.t-dropdown ::ng-deep *[tuiTab]:before{display:none}.t-dropdown ::ng-deep *[tuiTab]:hover,.t-dropdown ::ng-deep *[tuiTab]:focus,.t-dropdown ::ng-deep *[tuiTab]._active{box-shadow:none;outline:none;background:var(--tui-background-neutral-1)}.t-dropdown[data-size=m] ::ng-deep *[tuiTab]{block-size:2.25rem;font:var(--tui-font-text-s)}.t-dropdown-item{display:flex;flex-direction:column}.t-no-margin{margin-left:0}\n"] }]
        }], propDecorators: { moreButton: [{
                type: ViewChild,
                args: [TuiTab, { read: ElementRef }]
            }], dir: [{
                type: ViewChild,
                args: [TuiTabsHorizontal, { read: ElementRef }]
            }], items: [{
                type: ContentChildren,
                args: [TuiItem, { read: TemplateRef }]
            }], size: [{
                type: Input
            }], moreContent: [{
                type: Input
            }], dropdownContent: [{
                type: Input
            }], underline: [{
                type: Input
            }], itemsLimit: [{
                type: Input
            }], activeItemIndexChange: [{
                type: Output
            }], itemIndex: [{
                type: Input,
                args: ['activeItemIndex']
            }] } });
//# sourceMappingURL=data:application/json;base64,