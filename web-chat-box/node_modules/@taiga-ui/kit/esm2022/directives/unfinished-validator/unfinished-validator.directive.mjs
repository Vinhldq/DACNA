import { Directive, inject, Input } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { NG_VALIDATORS } from '@angular/forms';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { tuiProvide } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_DEFAULT_ERROR_MESSAGE } from '@taiga-ui/core/tokens';
import { tuiCreateUnfinishedValidator } from './unfinished.validator';
import * as i0 from "@angular/core";
class TuiUnfinishedValidator {
    constructor() {
        this.default = toSignal(inject(TUI_DEFAULT_ERROR_MESSAGE));
        this.el = tuiInjectElement();
        this.tuiUnfinishedValidator = '';
        this.validate = tuiCreateUnfinishedValidator(this.el, () => this.tuiUnfinishedValidator || this.default());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiUnfinishedValidator, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiUnfinishedValidator, isStandalone: true, selector: "input[tuiUnfinishedValidator]", inputs: { tuiUnfinishedValidator: "tuiUnfinishedValidator" }, providers: [tuiProvide(NG_VALIDATORS, TuiUnfinishedValidator, true)], ngImport: i0 }); }
}
export { TuiUnfinishedValidator };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiUnfinishedValidator, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'input[tuiUnfinishedValidator]',
                    providers: [tuiProvide(NG_VALIDATORS, TuiUnfinishedValidator, true)],
                }]
        }], propDecorators: { tuiUnfinishedValidator: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5maW5pc2hlZC12YWxpZGF0b3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2RpcmVjdGl2ZXMvdW5maW5pc2hlZC12YWxpZGF0b3IvdW5maW5pc2hlZC12YWxpZGF0b3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN2RCxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFFcEQsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3pELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUM3RCxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUVoRSxPQUFPLEVBQUMsNEJBQTRCLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQzs7QUFFcEUsTUFLYSxzQkFBc0I7SUFMbkM7UUFNcUIsWUFBTyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDO1FBQ3RELE9BQUUsR0FBRyxnQkFBZ0IsRUFBb0IsQ0FBQztRQUdwRCwyQkFBc0IsR0FBRyxFQUFFLENBQUM7UUFFbkIsYUFBUSxHQUFHLDRCQUE0QixDQUNuRCxJQUFJLENBQUMsRUFBRSxFQUNQLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQ3RELENBQUM7S0FDTDsrR0FYWSxzQkFBc0I7bUdBQXRCLHNCQUFzQiwwSUFGcEIsQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLHNCQUFzQixFQUFFLElBQUksQ0FBQyxDQUFDOztTQUUzRCxzQkFBc0I7NEZBQXRCLHNCQUFzQjtrQkFMbEMsU0FBUzttQkFBQztvQkFDUCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLCtCQUErQjtvQkFDekMsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDLGFBQWEsMEJBQTBCLElBQUksQ0FBQyxDQUFDO2lCQUN2RTs4QkFNVSxzQkFBc0I7c0JBRDVCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgaW5qZWN0LCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3RvU2lnbmFsfSBmcm9tICdAYW5ndWxhci9jb3JlL3J4anMtaW50ZXJvcCc7XG5pbXBvcnQgdHlwZSB7VmFsaWRhdG9yfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge05HX1ZBTElEQVRPUlN9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7dHVpSW5qZWN0RWxlbWVudH0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9kb20nO1xuaW1wb3J0IHt0dWlQcm92aWRlfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL21pc2NlbGxhbmVvdXMnO1xuaW1wb3J0IHtUVUlfREVGQVVMVF9FUlJPUl9NRVNTQUdFfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90b2tlbnMnO1xuXG5pbXBvcnQge3R1aUNyZWF0ZVVuZmluaXNoZWRWYWxpZGF0b3J9IGZyb20gJy4vdW5maW5pc2hlZC52YWxpZGF0b3InO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzdGFuZGFsb25lOiB0cnVlLFxuICAgIHNlbGVjdG9yOiAnaW5wdXRbdHVpVW5maW5pc2hlZFZhbGlkYXRvcl0nLFxuICAgIHByb3ZpZGVyczogW3R1aVByb3ZpZGUoTkdfVkFMSURBVE9SUywgVHVpVW5maW5pc2hlZFZhbGlkYXRvciwgdHJ1ZSldLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlVbmZpbmlzaGVkVmFsaWRhdG9yIGltcGxlbWVudHMgVmFsaWRhdG9yIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRlZmF1bHQgPSB0b1NpZ25hbChpbmplY3QoVFVJX0RFRkFVTFRfRVJST1JfTUVTU0FHRSkpO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZWwgPSB0dWlJbmplY3RFbGVtZW50PEhUTUxJbnB1dEVsZW1lbnQ+KCk7XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyB0dWlVbmZpbmlzaGVkVmFsaWRhdG9yID0gJyc7XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgdmFsaWRhdGUgPSB0dWlDcmVhdGVVbmZpbmlzaGVkVmFsaWRhdG9yKFxuICAgICAgICB0aGlzLmVsLFxuICAgICAgICAoKSA9PiB0aGlzLnR1aVVuZmluaXNoZWRWYWxpZGF0b3IgfHwgdGhpcy5kZWZhdWx0KCksXG4gICAgKTtcbn1cbiJdfQ==