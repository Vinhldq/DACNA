import { Directive, inject } from '@angular/core';
import { NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import { EMPTY_FUNCTION } from '@taiga-ui/cdk/constants';
import { tuiArrayToggle } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_DATA_LIST_HOST, tuiAsOptionContent, } from '@taiga-ui/core/components/data-list';
import { AbstractTuiControl } from '@taiga-ui/legacy/classes';
import { TuiMultiSelectOptionComponent } from '@taiga-ui/legacy/components/multi-select-option';
import { PolymorpheusComponent } from '@taiga-ui/polymorpheus';
import { TuiMultiSelectComponent } from '../multi-select.component';
import * as i0 from "@angular/core";
export const TUI_MULTI_SELECT_OPTION = new PolymorpheusComponent(TuiMultiSelectOptionComponent);
class TuiMultiSelectGroupDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiMultiSelectGroupDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiMultiSelectGroupDirective, selector: "[tuiMultiSelectGroup]", providers: [
            tuiAsOptionContent(TUI_MULTI_SELECT_OPTION),
            {
                provide: TUI_DATA_LIST_HOST,
                useFactory: () => {
                    const multiSelect = inject(TuiMultiSelectComponent, { optional: true });
                    const { control } = inject(NgControl);
                    const host = inject(AbstractTuiControl, { optional: true });
                    return (multiSelect || {
                        handleOption: (option) => {
                            if (host) {
                                host.value = tuiArrayToggle(host.value, option);
                            }
                            else {
                                control?.setValue(tuiArrayToggle(control.value || [], option));
                            }
                        },
                    });
                },
            },
            {
                provide: NG_VALUE_ACCESSOR,
                multi: true,
                useValue: {
                    writeValue: EMPTY_FUNCTION,
                    registerOnChange: EMPTY_FUNCTION,
                    registerOnTouched: EMPTY_FUNCTION,
                },
            },
        ], ngImport: i0 }); }
}
export { TuiMultiSelectGroupDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiMultiSelectGroupDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    selector: '[tuiMultiSelectGroup]',
                    providers: [
                        tuiAsOptionContent(TUI_MULTI_SELECT_OPTION),
                        {
                            provide: TUI_DATA_LIST_HOST,
                            useFactory: () => {
                                const multiSelect = inject(TuiMultiSelectComponent, { optional: true });
                                const { control } = inject(NgControl);
                                const host = inject(AbstractTuiControl, { optional: true });
                                return (multiSelect || {
                                    handleOption: (option) => {
                                        if (host) {
                                            host.value = tuiArrayToggle(host.value, option);
                                        }
                                        else {
                                            control?.setValue(tuiArrayToggle(control.value || [], option));
                                        }
                                    },
                                });
                            },
                        },
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useValue: {
                                writeValue: EMPTY_FUNCTION,
                                registerOnChange: EMPTY_FUNCTION,
                                registerOnTouched: EMPTY_FUNCTION,
                            },
                        },
                    ],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktc2VsZWN0LWdyb3VwLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xlZ2FjeS9jb21wb25lbnRzL211bHRpLXNlbGVjdC9tdWx0aS1zZWxlY3QtZ3JvdXAvbXVsdGktc2VsZWN0LWdyb3VwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNoRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUQsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUVqRSxPQUFPLEVBQ0gsa0JBQWtCLEVBQ2xCLGtCQUFrQixHQUNyQixNQUFNLHFDQUFxQyxDQUFDO0FBQzdDLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQzVELE9BQU8sRUFBQyw2QkFBNkIsRUFBQyxNQUFNLGlEQUFpRCxDQUFDO0FBQzlGLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBRTdELE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLDJCQUEyQixDQUFDOztBQUVsRSxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxJQUFJLHFCQUFxQixDQUM1RCw2QkFBNkIsQ0FDaEMsQ0FBQztBQUVGLE1Bc0NhLDRCQUE0QjsrR0FBNUIsNEJBQTRCO21HQUE1Qiw0QkFBNEIsZ0RBbkMxQjtZQUNQLGtCQUFrQixDQUFDLHVCQUF1QixDQUFDO1lBQzNDO2dCQUNJLE9BQU8sRUFBRSxrQkFBa0I7Z0JBQzNCLFVBQVUsRUFBRSxHQUEwQixFQUFFO29CQUNwQyxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsdUJBQXVCLEVBQUUsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztvQkFDdEUsTUFBTSxFQUFDLE9BQU8sRUFBQyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztvQkFDcEMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixFQUFFLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7b0JBRTFELE9BQU8sQ0FDSCxXQUFXLElBQUk7d0JBQ1gsWUFBWSxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUU7NEJBQ3JCLElBQUksSUFBSSxFQUFFO2dDQUNOLElBQUksQ0FBQyxLQUFLLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7NkJBQ25EO2lDQUFNO2dDQUNILE9BQU8sRUFBRSxRQUFRLENBQ2IsY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUM5QyxDQUFDOzZCQUNMO3dCQUNMLENBQUM7cUJBQ0osQ0FDSixDQUFDO2dCQUNOLENBQUM7YUFDSjtZQUNEO2dCQUNJLE9BQU8sRUFBRSxpQkFBaUI7Z0JBQzFCLEtBQUssRUFBRSxJQUFJO2dCQUNYLFFBQVEsRUFBRTtvQkFDTixVQUFVLEVBQUUsY0FBYztvQkFDMUIsZ0JBQWdCLEVBQUUsY0FBYztvQkFDaEMsaUJBQWlCLEVBQUUsY0FBYztpQkFDcEM7YUFDSjtTQUNKOztTQUVRLDRCQUE0Qjs0RkFBNUIsNEJBQTRCO2tCQXRDeEMsU0FBUzttQkFBQztvQkFDUCxVQUFVLEVBQUUsS0FBSztvQkFDakIsUUFBUSxFQUFFLHVCQUF1QjtvQkFDakMsU0FBUyxFQUFFO3dCQUNQLGtCQUFrQixDQUFDLHVCQUF1QixDQUFDO3dCQUMzQzs0QkFDSSxPQUFPLEVBQUUsa0JBQWtCOzRCQUMzQixVQUFVLEVBQUUsR0FBMEIsRUFBRTtnQ0FDcEMsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLHVCQUF1QixFQUFFLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7Z0NBQ3RFLE1BQU0sRUFBQyxPQUFPLEVBQUMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7Z0NBQ3BDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxFQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO2dDQUUxRCxPQUFPLENBQ0gsV0FBVyxJQUFJO29DQUNYLFlBQVksRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFO3dDQUNyQixJQUFJLElBQUksRUFBRTs0Q0FDTixJQUFJLENBQUMsS0FBSyxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO3lDQUNuRDs2Q0FBTTs0Q0FDSCxPQUFPLEVBQUUsUUFBUSxDQUNiLGNBQWMsQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FDOUMsQ0FBQzt5Q0FDTDtvQ0FDTCxDQUFDO2lDQUNKLENBQ0osQ0FBQzs0QkFDTixDQUFDO3lCQUNKO3dCQUNEOzRCQUNJLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLEtBQUssRUFBRSxJQUFJOzRCQUNYLFFBQVEsRUFBRTtnQ0FDTixVQUFVLEVBQUUsY0FBYztnQ0FDMUIsZ0JBQWdCLEVBQUUsY0FBYztnQ0FDaEMsaUJBQWlCLEVBQUUsY0FBYzs2QkFDcEM7eUJBQ0o7cUJBQ0o7aUJBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgaW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TkdfVkFMVUVfQUNDRVNTT1IsIE5nQ29udHJvbH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtFTVBUWV9GVU5DVElPTn0gZnJvbSAnQHRhaWdhLXVpL2Nkay9jb25zdGFudHMnO1xuaW1wb3J0IHt0dWlBcnJheVRvZ2dsZX0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9taXNjZWxsYW5lb3VzJztcbmltcG9ydCB0eXBlIHtUdWlEYXRhTGlzdEhvc3R9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvZGF0YS1saXN0JztcbmltcG9ydCB7XG4gICAgVFVJX0RBVEFfTElTVF9IT1NULFxuICAgIHR1aUFzT3B0aW9uQ29udGVudCxcbn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvY29tcG9uZW50cy9kYXRhLWxpc3QnO1xuaW1wb3J0IHtBYnN0cmFjdFR1aUNvbnRyb2x9IGZyb20gJ0B0YWlnYS11aS9sZWdhY3kvY2xhc3Nlcyc7XG5pbXBvcnQge1R1aU11bHRpU2VsZWN0T3B0aW9uQ29tcG9uZW50fSBmcm9tICdAdGFpZ2EtdWkvbGVnYWN5L2NvbXBvbmVudHMvbXVsdGktc2VsZWN0LW9wdGlvbic7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbXBvbmVudH0gZnJvbSAnQHRhaWdhLXVpL3BvbHltb3JwaGV1cyc7XG5cbmltcG9ydCB7VHVpTXVsdGlTZWxlY3RDb21wb25lbnR9IGZyb20gJy4uL211bHRpLXNlbGVjdC5jb21wb25lbnQnO1xuXG5leHBvcnQgY29uc3QgVFVJX01VTFRJX1NFTEVDVF9PUFRJT04gPSBuZXcgUG9seW1vcnBoZXVzQ29tcG9uZW50KFxuICAgIFR1aU11bHRpU2VsZWN0T3B0aW9uQ29tcG9uZW50LFxuKTtcblxuQERpcmVjdGl2ZSh7XG4gICAgc3RhbmRhbG9uZTogZmFsc2UsXG4gICAgc2VsZWN0b3I6ICdbdHVpTXVsdGlTZWxlY3RHcm91cF0nLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB0dWlBc09wdGlvbkNvbnRlbnQoVFVJX01VTFRJX1NFTEVDVF9PUFRJT04pLFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBUVUlfREFUQV9MSVNUX0hPU1QsXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiA8VD4oKTogVHVpRGF0YUxpc3RIb3N0PFQ+ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBtdWx0aVNlbGVjdCA9IGluamVjdChUdWlNdWx0aVNlbGVjdENvbXBvbmVudCwge29wdGlvbmFsOiB0cnVlfSk7XG4gICAgICAgICAgICAgICAgY29uc3Qge2NvbnRyb2x9ID0gaW5qZWN0KE5nQ29udHJvbCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaG9zdCA9IGluamVjdChBYnN0cmFjdFR1aUNvbnRyb2wsIHtvcHRpb25hbDogdHJ1ZX0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgbXVsdGlTZWxlY3QgfHwge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlT3B0aW9uOiAob3B0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhvc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9zdC52YWx1ZSA9IHR1aUFycmF5VG9nZ2xlKGhvc3QudmFsdWUsIG9wdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbD8uc2V0VmFsdWUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dWlBcnJheVRvZ2dsZShjb250cm9sLnZhbHVlIHx8IFtdLCBvcHRpb24pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICAgICAgICBtdWx0aTogdHJ1ZSxcbiAgICAgICAgICAgIHVzZVZhbHVlOiB7XG4gICAgICAgICAgICAgICAgd3JpdGVWYWx1ZTogRU1QVFlfRlVOQ1RJT04sXG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJPbkNoYW5nZTogRU1QVFlfRlVOQ1RJT04sXG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJPblRvdWNoZWQ6IEVNUFRZX0ZVTkNUSU9OLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICBdLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlNdWx0aVNlbGVjdEdyb3VwRGlyZWN0aXZlIHt9XG4iXX0=